var documenterSearchIndex = {"docs":
[{"location":"majd/#mAJD-1","page":"mAJD","title":"mAJD","text":"","category":"section"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Multiple Approximate Joint Diagonalization (MAJD) is the utmost general diagonalization prodedure implemented in Diagonalizations.jl. It generalizes the AJD to the case of multiple datasets (m1) and the gMCA/gCCA to the case of multiple observations (k1). Therefore, it suits the situation m2 (multiple datasets) and k2 (multiple observations) at once.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Let X_l1X_lm be k sets of m data matrices of dimension nt each, indexed by l1k.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"From these data matrices let us estimate","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"C_lij=frac1TX_liX_lj^H, for all l1k and ij1m, hspace1cm [majd.1]","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"i.e., all covariance (i=j) and cross-covariance (ij) matrices for all l1k.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"The MAJD seeks m matrices F_1F_m diagonalizing as much as possible all products","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"F_i^H C_lij F_j, for all l1k and ij1m hspace1cm [majd.2]","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"or all products","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"F_i^H C_lij F_j, for all l1k and ij1m, hspace1cm [majd.3]","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"depending on the chosen model (see argument fullModel below).","category":"page"},{"location":"majd/#pre-whitening-for-MAJD-1","page":"mAJD","title":"pre-whitening for MAJD","text":"","category":"section"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Pre-whitening can be applied. In this case, first m whitening matrices W_1W_m are found such that","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"W_i^HBig(frac1ksum_l=1^kC_kiiBig)W_i=I, for all i1m hspace1cm","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"then the following transformed AJD problem if solved for U_1U_m:","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"U_i^H(W_i^HC_lijW_j)U_jŒõ_lij, for all l1k and ij1m.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Finally, F_1F_m are obtained as","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"F_i=W_iU_i, for i1m. hspace1cm","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Notice that:","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"matrix W may be taken rectangular so as to engender a dimensionality reduction at this stage. This may improve the convergence behavior of AJD algorithms if the matrices C_lii are not well-conditioned.  \nif this two-step procedure is employed, the final matrices F_1F_m are never orthogonal, even if the solving AJD algorithm constrains the solutions within the orthogonal group.","category":"page"},{"location":"majd/#permutation-for-MAJD-1","page":"mAJD","title":"permutation for MAJD","text":"","category":"section"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"As usual, the approximate diagonalizers F_1F_m are arbitrary up to a scale and permutation. in MAJD scaling is fixed by appropriate constraints. For the remaining sign and permutation ambiguities, Diagonalizations.jl attempts to solve them by finding signed permutation matrices for F_1F_m so as to make all diagonal elements of [gmca.2] or [gmca.3] positive and sorted in descending order.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Let","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Œª=Œª_1Œª_n  hspace1cm [majd.4]","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"be the diagonal elements of","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"frac1k(m^2-m)sum_j=1^ksum_ij=1^m(F_i^H C_lij F_j) hspace1cm [majd.5]","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"and œÉ_TOT=sum_i=1^nŒª_i be the total variance.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"We denote widetildeF_i=f_i1 ldots f_ip the matrix holding the first pn column vectors of F_i, where p is the subspace dimension. The explained variance is given by","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"œÉ_p=fracsum_i=1^pŒª_iœÉ_TOT hspace1cm [majd.6]","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"and the accumulated regularized eigenvalues (arev) by","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"œÉ_j=sum_i=1^jœÉ_i, for j=1 ldots n, hspace1cm [majd.7]","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"where œÉ_i is given by Eq. [majd.6].","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Solution","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"There is no closed-form solution to the MAJD problem in general. Diagonalizations.jl implements the following iterative algorithms:","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Algorithm Constraint Reference\nOJoB F orthogonal Congedo et al (2011, 2012); Congedo (2013)","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"Constructors","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"One constructor is available (see here below). The constructed LinearFilter object holding the MAJD will have fields:","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":".F: vector of matrices widetildeF_1widetildeF_m with columns holding the first p eigenvectors in F_1F_m, or just F_1F_m if p=n","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":".iF: the vector of the left-inverses of the matrices in .F","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":".D: the leading pp block of Œõ, i.e., the elements [majd.4] associated to the matrices in .F in diagonal form.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":".eVar: the explained variance [majd.6] for the chosen value of p.","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":".ev: the vector Œª [majd.4].","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":".arev: the accumulated regularized eigenvalues  in [majd.7].","category":"page"},{"location":"majd/#","page":"mAJD","title":"mAJD","text":"majd","category":"page"},{"location":"majd/#Diagonalizations.majd","page":"mAJD","title":"Diagonalizations.majd","text":"function majd(ùëø::VecVecMat;\n              covEst     :: StatsBase.CovarianceEstimator = SCM,\n              dims       :: Into    = ‚óã,\n              meanX      :: Into    = 0,\n          algorithm :: Symbol    = :OJoB,\n          fullModel :: Bool      = false,\n          preWhite  :: Bool      = false,\n          sort      :: Bool      = true,\n          init      :: VecMato   = ‚óã,\n          tol       :: Real      = 0.,\n          maxiter   :: Int       = 1000,\n          verbose   :: Bool      = false,\n        eVar     :: TeVaro   = _minDim(ùëø),\n        eVarC    :: TeVaro   = ‚óã,\n        eVarMeth :: Function = searchsortedfirst,\n        simple   :: Bool     = false)\n\n\nReturn a LinearFilter object.\n\nMultiple Approximate Joint Diagonalization of the k sets of m data matrices ùêó using the given solving algorithm (OJoB by default).\n\nIf fullModel is true, the [gmca.3] problem here above is solved, otherwise (default), the [gmca.2] problem here above is solved.\n\nIf preWhite the two-step procedure explained here above in the section pre-whitening for MAJD is used. Dimensionality reduction can be obtained at this stage using arguments eVarC and eVarMeth.\n\nThe default values are:\n\neVarC is set to 0.999\neVarMeth=searchsortedfirst.\n\nIf sort is true (default), the column vectors of the matrices F_1F_m are signed and permuted as explained here above in permutation for MAJD, otherwise they will have arbitrary sign and will be in arbitrary order.\n\nA vector of matrices can be passed with the init argument in order to initialize the matrices F_1F_m to be found by the MAJD algorithm. If nothing is passed (default), following Congedo et al. (2011)üéì matrices F_i are initialized with the eigevector matrix of\n\nfrac1msum_l=1^ksum_j=1^m C_lijC_lij^H\n\nif fullModel is true,\n\nfrac1msum_l=1^ksum_ji j=1^m C_lijC_lij^H\n\nif fullModel is false.\n\ntol is the tolerance for convergence of the solving algorithm. By default it is set to the square root of Base.eps of the nearest real type of the data input. This corresponds to requiring the relative change across two successive iterations of the average squared norm of the column vectors of matrices F_1F_m to vanish for about half the significant digits. If the solving algorithm encounter difficulties in converging, try setting tol in between 1e-6 and 1e-3.\n\nmaxiter is the maximum number of iterations allowed to the solving algorithm (1000 by default). If this maximum number of iteration is attained, a warning will be printed in the REPL. In this case, try increasing maxiter and/or tol.\n\nIf verbose is true (false by default), the convergence attained at each iteration will be printed in the REPL.\n\neVar and eVarMeth are used to define a subspace dimension p using the accumulated regularized eigenvalues in Eq. [gmca.7]\n\nThe default values are:\n\neVar is set to the minimum dimension of the matrices in ùêó\neVarMeth=searchsortedfirst.\n\nIf simple is set to true, p is set equal to the dimension of the covariance matrices that are computed on the matrices in ùêó, which depends on the choice of dims, and only the fields .F and .iF are written in the constructed object. This corresponds to the typical output of approximate diagonalization algorithms.\n\nSee also: gMCA, gCCA, AJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\n##  Create data for testing the case k>1, m>1 ##\n# `t` is the number of samples,\n# `m` is the number of datasets,\n# `k` is the number of observations,\n# `n` is the number of variables,\n# `noise` must be smaller than 1.0. The smaller the noise, the more data are correlated\n# Output k vectors of m data data matrices\nfunction getData(t, m, k, n, noise)\n    # create m identical data matrices and rotate them by different\n    # random orthogonal matrices V_1,...,V_m\n    ùêï=[randU(n) for i=1:m] # random orthogonal matrices\n    # variables common to all subjects with unique variance profile across k\n    X=[(abs2.(randn(n))).*randn(n, t) for s=1:k]\n    # each subject has this common part plus a random part\n    ùêó=[[ùêï[i]*((1-noise)*X[s] + noise*randn(n, t)) for i=1:m] for s=1:k]\n    return ùêó, ùêï\nend\n\n# do joint blind source separation of non-stationary data\nt, m, n, k, noise = 200, 5, 4, 6, 0.4\nXset, Vset=getData(t, m, k, n, noise)\nùíû=Array{Matrix}(undef, k, m, m)\nfor s=1:k, i=1:m, j=1:m ùíû[s, i, j]=(Xset[s][i]*Xset[s][j]')/t end\n\naX=majd(Xset; fullModel=true, algorithm=:OJoB)\n# the spForm index of the estimated demixing matrices times the true\n# mixing matrix must be low\n@test mean(spForm(aX.F[i]'*Vset[i]) for i=1:m)<0.1\n\n# plot the original cross-covariance matrices and the rotated\n# cross-covariance matrices\n\n# Get all products ùêî[i]' * ùíû[l, i, j] * ùêî[j]\nfunction _rotate_crossCov(ùêî, ùíû, m, k)\n    ùíÆ=Array{Matrix}(undef, k, m, m)\n    @inbounds for l=1:k, i=1:m, j=1:m ùíÆ[l, i, j]=ùêî[i]'*ùíû[l, i, j]*ùêî[j] end\n    return ùíÆ\nend\n\n# Put all `k` cross-covariances in a single matrix\n# of dimension m*n x m*n for visualization\nfunction ùíû2Mat(ùíû::AbstractArray, m, k)\n    n=size(ùíû[1, 1, 1], 1)\n    C=Matrix{Float64}(undef, m*n, m*n)\n    for i=1:m, j=1:m, x=1:n, y=1:n C[i*n-n+x, j*n-n+y]=ùíû[k, i, j][x, y] end\n    return C\nend\n\nusing Plots\n\nCset=[ùíû2Mat(ùíû, m, s) for s=1:k]\n Cmax=maximum(maximum(abs.(C)) for C ‚àà Cset)\n h1 = heatmap(Cset[1], clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all cross-covariances, k=1\")\n h2 = heatmap(Cset[2], clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all cross-covariances, k=2\")\n h3 = heatmap(Cset[2], clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all cross-covariances, k=3\")\n h4 = heatmap(Cset[2], clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all cross-covariances, k=4\")\n h5 = heatmap(Cset[2], clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all cross-covariances, k=5\")\n h6 = heatmap(Cset[2], clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all cross-covariances, k=6\")\n üìà=plot(h1, h2, h3, h4, h5, h6, size=(1000,400))\n# savefig(üìà, homedir()*\"\\Documents\\Code\\julia\\Diagonalizations\\docs\\src\\assets\\FigmAJD1.png\")\n\nùíÆ=_rotate_crossCov(aX.F, ùíû, m, k)\n Sset=[ùíû2Mat(ùíÆ, m, s) for s=1:k]\n Smax=maximum(maximum(abs.(S)) for S ‚àà Sset)\n h11 = heatmap(Sset[1], clim=(-Smax, Smax), yflip=true, c=:bluesreds, title=\"rotated cross-covariances, k=1\")\n h12 = heatmap(Sset[2], clim=(-Smax, Smax), yflip=true, c=:bluesreds, title=\"rotated cross-covariances, k=2\")\n h13 = heatmap(Sset[2], clim=(-Smax, Smax), yflip=true, c=:bluesreds, title=\"rotated cross-covariances, k=3\")\n h14 = heatmap(Sset[2], clim=(-Smax, Smax), yflip=true, c=:bluesreds, title=\"rotated cross-covariances, k=4\")\n h15 = heatmap(Sset[2], clim=(-Smax, Smax), yflip=true, c=:bluesreds, title=\"rotated cross-covariances, k=5\")\n h16 = heatmap(Sset[2], clim=(-Smax, Smax), yflip=true, c=:bluesreds, title=\"rotated cross-covariances, k=6\")\n üìâ=plot(h11, h12, h13, h14, h15, h16, size=(1000,400))\n# savefig(üìâ, homedir()*\"\\Documents\\Code\\julia\\Diagonalizations\\docs\\src\\assets\\FigmAJD2.png\")\n\n\n(Image: Figure mAJD1)\n\n(Image: Figure mAJD2)\n\nIn the bottom figures here above, the rotated cross-covariance matrices have the expected strip-diagonal form, that is, each block F_i^Tfrac1T(X_liX_lj^T)F_j, for l1k, ij1m, is approximately diagonal.\n\n\n\n\n\n","category":"function"},{"location":"Diagonalizations/#Diagonalizations.jl-1","page":"Diagonalizations","title":"Diagonalizations.jl","text":"","category":"section"},{"location":"Diagonalizations/#dependencies-1","page":"Diagonalizations","title":"dependencies","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"standard Julia packages external packages\nLinearAlgebra CovarianceEstimation\nStatistics PosDefManifold\nStatsBase ","category":"page"},{"location":"Diagonalizations/#types-1","page":"Diagonalizations","title":"types","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"abstract type LinearFilters end","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"is the abstract type for all filters.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"All filters are instances of the following immutable structure:","category":"page"},{"location":"Diagonalizations/#LinearFilter-1","page":"Diagonalizations","title":"LinearFilter","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"struct LinearFilter <: LinearFilters\n   F     :: AbstractArray\n   iF    :: AbstractArray\n   D     :: Diagonal\n   eVar  :: Float64\n   ev    :: Vec\n   arev  :: Vec\n   name  :: String","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Fields:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":".F: for simple filters (PCA, Whitening, CSP, AJD), this is an np matrix, where n is the number of variables in the data the filter has been derived from and p is the subspace dimension. For composite filters this is a vector of m of such np matrices, where","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"m=2 for MCA, CCA and CSTP filters\nm2 for gMCA, gCCA and mAJD filters.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":".iF: the pn left-inverse of the filter(s) in .F, that is, multiplying on the right all matrices in .iF by the corresponding matrices in .F yields the pp identity matrix.   ","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The following fields are populated by default, but may be set altogether to nothing by all constructors using the simple optional keyword argument:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":".D: a pp Diagonal matrix holding the (generalized) eigenvalues or singular values, depending on the filter, of the last diagonalization that has been used to derive the filter. Since .D is in diagonal form, this matrix can be used directly in algebraic computations. For example, if a is a PCA filter computed from covariance matric C and p=n, then C‚âàa.F*a.D*a.iF is true. In a similar way, if b is a MCA filter computed from cross-covariance matric C_xy and p=n, then C_xy‚âàb.F[1]*b.D*b.F[2]' is true.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":".eVar: the actual explained variance or variance ratio of the filter(s) in .F. This depends on the filter, see the documentation of each filter for details.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":".ev: a vector holding all the n (generalized) eigenvalues or singular values, depending on the filter, of the last diagonalization that has been used to derive the filter. If p=n, this is a vector holding the diagonal of .D, otherwise .D holds in diagonal form only the first p elements of .ev.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"arev.: a vector holding an accumulated regularized function of .ev used to find the subspace dimension. This depends on the filter, see the documentation of each filter for details.","category":"page"},{"location":"Diagonalizations/#LinearFilter-methods-1","page":"Diagonalizations","title":"LinearFilter methods","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The LinearFilter structure supports the following methods:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"size(f::LF)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Return the size of f.F if it is a matrix, an iterator over the sizes of all matrices in f.F if it is a vector of matrices.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"length(f::LF)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Return 1 if f.F is a matrix, the number of matrices in f.F if it is a vector of matrices. Referring to Table 1 and Fig. 1 (see Overview), this is the number of datasets m.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"eltype(f::LF)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Return the element type of the matrix(ces) in f.F.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"==(f::LF, g::LF), ‚âà(f::LF, g::LF)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Return true if all fields of LinearFilter f and g are equivalent, false otherwise. All but the .F and .iF fields are requested to be equal, where for vector fields approximate equality is ascetrained using the ‚âà function. For the equivalence of the matrices in fields .F and .iF, it is requested that the mean spForm index of the matrices in f.iF times the corresponding matrices in g.F and of the matrices in g.iF times the corresponding matrices in f.F is smaller then 0.05.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"‚â†(f::LF, g::LF), ‚ââ (f::LF, g::LF)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The negation of ==.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"function cut(f::LinearFilter, p::Int64)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Create another LinearFilter object with a smaller subspace dimension given by argument p. This applies to the matrix(ces) in fields .F, .iF and .D. All other fields remain the same.","category":"page"},{"location":"Diagonalizations/#data-input-1","page":"Diagonalizations","title":"data input","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"All filter constructors take as input either data matrices or covariance matrices. Covariance matrices must be flagged by Julia as either Symmetric, if they are real, or Hermitian, if they are real or complex, e.g.,","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"X=randn(100, 30)\nC=(X'*X)/100\np=pca(Symmetric(C))\n# p=pca(C) will throw an ArgumentError","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"the above call to the pca constructor is equivalent to","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"X=randn(100, 30)\np=pca(X)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Some methods take as input a vector of Hermitian matrices, of type ‚ÑçVector, see typecasting matrices.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Using data matrices as input, shrinked covariance matrix estimators can be used for several filters (e.g., PCA, Whitening, CSP, CSTP). See here below.","category":"page"},{"location":"Diagonalizations/#covariance-matrix-estimations-1","page":"Diagonalizations","title":"covariance matrix estimations","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"By default, when data matrices are used as data input, Diagonalizations.jl computes covariance matrices along the larger dimension of the data matrices. That is, for rc data matrix X, if rc frac1rX^TX is computed, otherwise frac1cXX^T is computed. Hence, the default behavior assumes that the number of observations is larger than the number of variables, as it is usually appropriate. Covariance matrices can be computed along a specific dimension using optional keyword argument dims, as in StatsBase.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Many filter constructors allow to use shrinked covariance matrix estimations by means of the CovarianceEstimation package.    The following constants are provided to allow quick access to the most popular choices among the many estimators implemented therein:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"SCM=SimpleCovariance()","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"This is the default for all constructors and corresponds to the standard sample covariance matrix (SCM) estimation.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"LShrLW=LShr(ConstantCorrelation())","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"This corresponds to the SCM estimator shrinked by the linear method of Ledoit and Wolf (2004) üéì.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"LShr=LinearShrinkage","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"This is a shortcut for requesting other types of linear Shrinkage. See the CovarianceEstimation package for details.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"NShrLW=AnalyticalNonlinearShrinkage()","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"This corresponds to the SCM estimator shrinked by the analytical non-linear method of Ledoit and Wolf (2018) üéì.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Also, several filter constructors allow to use a mean and w keyword arguments:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"mean can be used to subtract the mean from the variables of data matrices (e.g., data matrix X).","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"if mean=0, the mean will not be subtracted (default);\nif mean=nothing, the mean will be computed and subtracted;\nmean can be a vector of means to be subtracted:\nit must have length=size(X, 2) if dims=1, length=size(X, 2) if dims=2;\nmean can also be a matrix of means to be subtracted:\nit must have size=(1, size(X, 2)) if dims=1, size=(size(X, 1), 1) if dims=2.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"note: Nota Bene\nFor filter constructors taking as input sets of data matrices, the mean argument can be set only to 0 (default) or nothing.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"w can be nothing (default) or a StatsBase.AbstractWeights object to weights the samples of data matrices (e.g., data matrix X). It must have length=size(X, dims), where dims by default is set to the larger dimesnion of X. For some constructors w can also be a function. This is documented in the concerned constructors.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Note that if several data matrices can be given as input to filter constructors, for example X, Y,..., then you will find arguments named such as meanX, meanY,... and wX, wY,... to differentiate the mean ad weights of the several input data matrices.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Examples:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"using Diagonalizations\n\nX=randn(100, 30) # X is 'tall', the default format\np=pca(X)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The call here above uses the default SCM estimator and computes the PCA from the 3030 covariance matrix frac1100X^TX. The 'filter' p.F is 30p, where p is the subspace dimension.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"This call","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"p=pca(X; covEst=LShrLW)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"uses the linear shrinked estimator of Ledoit and Wolf (2004).","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The call","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"p=pca(X; dims=2)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"uses the default SCM estimator and compute the PCA from the 100100 (rank-deficient) covariance matrix frac130XX^T. The 'filter' p.F is in this case 100p.","category":"page"},{"location":"Diagonalizations/#mean-covariance-matrix-estimations-1","page":"Diagonalizations","title":"mean covariance matrix estimations","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Some filters can take as input data a set of data matrices (a vector of matrices). In this case a covariance matrix is estimated for each data matrix in the set and then a mean of these covariance matrices is estimated.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"If the covariance matrices are actually cross-covariance matrices, no option is provided and the usual arithmetic mean is computed. If they are Symmetric or Hermitian covariance matrices, the mean function of package PosDefManifold.jl is used, since those matrices may be positive definite by construction, hence a mean using a metric acting on the Riemannian manifold of positive definite matrices may be used.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The constructors using this feature employ the following optional keyword arguments for regulating the computation of the mean:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"metric: the metric used to compute the mean. PosDefManifold.jl supports 10 metrics, nine of which can be used here (all but the VonNeumann metric). Of particular interest are the following","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Fisher: the natural affine invariant metric, possessing all good properties of a mean.\nlogEuclidean, Jeffrey: computationally cheaper alternatives to 1), but not possessing all good properties of a mean.\ninvEuclidean: leading to the matrix harmonic mean.\nEuclidean: (default) leading to the usual matrix arithmetic mean, thus applying also if the input matrices are not positive-definite.\nWasserstein: a metric widely adopted in statistics, optimal transport and quantum physics (also known as Bures-Hellinger), also applying if the input matrices are not positive-definite.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Note that, since by default covariance matrices are computed along the larger dimension of data matrices, the covariance matrices will be positive definite as long as the number of observations is sufficiently larger then the number of variables.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"See the documentation of the mean function for arguments w, ‚úìw, init, tol and verbose. Note that the name of the w (and init) arguments may actually be wCx, w‚ÇÅ (initCx, init‚ÇÅ) and similar. This is to allow using them for different data matrices used to construct the filter.   ","category":"page"},{"location":"Diagonalizations/#subspace-dimension-1","page":"Diagonalizations","title":"subspace dimension","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"For a 'wide' nt data matrix X, where n is the number of variables and tn the number of samples, with nn covariance matrix C, the transformed data is given by F^HX and the transformed covariance matrix by F^HCF.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"In the above, F is the np filter matrix and p is named the subspace dimension. The data filtered in this subspace is given by","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"widetildeX=F^-HF^HX","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"and the filtered covariance by","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"widetildeC=F^-HF^HCFF^-1.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"If the matrix X is available in the 'tall' form tn (default), the tranformed data is given by XF and the data filtered in the subspace is given by","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"widetildeX=XFF^-1.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The expressions for the transformed and filtered covariance matrix are the same as before.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"For all filters Diagonalizations.jl allows to set the subspace dimension p using the eVar and eVarMeth optional keyword arguments. Ultimately, p will be en integer 1 n representing the subspace dimension. The user may set p:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"manually,","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"either setting eVar explicitly to an integer 1 n, or  setting eVar to the desired explained variance in the subspace filtered  data, as a float (0 1, where 1 corresponds to the total variance.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"automaticlly (default),","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"according to the .arev (accumulated regularized eigenvalues) vector  that is computed by the filter constructors. This vector is  non-decreasing and the last element is always 10. The way it is  computed depends on the filter. Please refer to the documentation of  each filter for details on how the .arev vector is defined.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"When eVar is given as a float or when such float ia allowed to be chosen automatically (default), the function passed as the eVarMeth argument determines the subspace dimension p so as to explain an amount of variance as close as possible to the desierd eVar. In fact .arev holds only n discrete possible values of explained variance. Therefore, the .arev vector is passed to the eVarMeth function. By default, eVarMeth is set to the Julia standard searchsortedfirst function, which will select the smallest p allowing at least eVar explained variance. This amounts to rounding up the desired eVar variance. Another useful choice is the Julia standard searchsortedlast function, which will select the largest p allowing at most eVar explained variance. This amounts to rounding down the desired eVar variance.  ","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"You can pass a user-defined function as eVarMeth. The function you define will take the .arev vector computed by the filter constructor as input and will return an integer, which will be automatically clamped to be 1 n.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Note that once the filter has been constructed, its .eVar field will hold the actual explained variance, not the desired one that has been passed to the constructor using the eVar argument.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Note also that for some filter constructors you will find the eVar optional keyword argument and also other arguments with simialr name, such as eVarCx and eVarCy. These arguments act in a similar way as the main eVar argument, but apply to determine the subspace dimension of intermediate diagonalization procedures, typically, pre-whitening procedures. See also notation & nomenclature and covariance matrix estimations.","category":"page"},{"location":"Diagonalizations/#scale-and-permutation-1","page":"Diagonalizations","title":"scale and permutation","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Let F be a diagonalizer of matrix C, i.e.,","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"F^HCF=Œõ","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"with Œõ a diagonal matrix. Let P a permutation matrix and O a diagonal matrix whose entries are either 1 or -1. It is easy to verify then that any matrix FPO is an identical diagonalizer of C, since OP^HF^HCFPO=Œõ. This implies that the filter matrices found by an exact diagonalization procedures are arbitrary up to sign and permutation of their columns.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"If O is a generic diagonal matrix, it is easy to verify then that any matrix FPO is an equivalent diagonalizer of C (Belouchrani et al., 1997 üéì), since OP^TF^TCFPO is also diagonal, albeit different from Œõ. This implies that there exist infinite equivalent exact diagonalizers and that the solution is arbitrary up to scale and permutation of the columns. Of course, the scale ambiguity implies the sign ambiguity, but not vice versa.   All exact diagonalization procedures implicitly constraint the solution to find P and O such that Œõ possesses a desired property. For example, in principal component analysis the elements of Œõ are the maximum values that can be attained constraining  F to be orthogonal.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The same ambiguity applies to approximate joint diagonalization. Let F be an approximate joint diagonalizer of matrix set C_1C_K, i.e.,","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"F^HC_lFŒõ_k for l1 k","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"and let D be a diagonal matrix, then it is easy to verify that any matrix FPD is an equivalent approximate joint diagonalizer of the set C. To check if two diagonalizers are equivaent, you can use the spForm function.","category":"page"},{"location":"Diagonalizations/#notation-and-nomenclature-1","page":"Diagonalizations","title":"notation & nomenclature","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"Throughout the code and documentation of this package the following notation is followed:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"scalars and vectors are denoted using lower-case letters, e.g., y,\nmatrices using upper case letters, e.g., X\nsets (vectors) of matrices using bold upper-case letters, e.g., ùêó.\nsuperscripts H and T denote matrix complex conjugate-transpose and transpose.","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"The following nomenclature is used consistently:","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"X, Y: data matrices\nùêó, ùêò: vectors of data matrices\nC: a covariance matrix\nùêÇ: a vector of covariance matrices\nCx: the covariance matrix of data matrix X\nCxy: the cross-covariance matrix of X and Y\nU, V: orthogonal matrices of eigenvectors or the left and right singular vectors\nŒª: vector of eigenvalues, singular values or a function thereof\nŒõ: diagonal matrix of eigenvalues, singular values or a function thereof\nB, F: non-singular matrices","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"In the examples, bold upper-case letters are replaced by upper case letters in order to allow reading in the REPL.","category":"page"},{"location":"Diagonalizations/#acronyms-1","page":"Diagonalizations","title":"acronyms","text":"","category":"section"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"AJD: Approximate Joint Diagonalization (Cardoso & Souloumiac, 1996; Flury & Gautschi, 1986)\nAJEVD: Approximate Joint Eigenvalue-Eigenvector Decomposition\nAJSVD: Approximate Joint Singular Value Decomposition (Congedo et al., 2011)\nAMUSE: Algorithm for Multiple Source Extraction (Molgedey & Schuster, 1994; Tong et al., 1991)\nBSS: Blind Source Separation\nCCA: Canonical Correlation Analysis (Hotelling, 1936)\nCSP: Common Spatial Pattern (Fukunaga, 1990)\nCSTP: Common Spatio-Temporal Pattern (Congedo et al., 2016)\nEEG: Electroencephalography\nERP: Event-Related Potentials\nFOBI: Fourth-Order Blind Identification (Cardoso, 1989)\ngCCA: generalized CCA\ngMCA: generalized MCA\nJADE: Joint Diagonalization of Eigenmatrices (Cardoso & Souloumiac, 1993)\nLShrLW: Linear Shrinkage of Ledoit and Wolf (2004)\nNShrLW: Non-linear Shrinkage of Ledoit and Wolf (2018)\nMCA: Maximum Covariance Analysis\nNoJoB: Non-orthogonal Joint BSS (Congedo et al., 2012)\nOJoB: Orthogonal Joint BSS (Congedo et al., 2012)\nPCA: Principal Component Analysis (Pearson, 1901)\nSCM: Sample Covariance Matrix\nSOBI: Second-Order Blind Identification (Belouchrani et al., 1997)","category":"page"},{"location":"Diagonalizations/#","page":"Diagonalizations","title":"Diagonalizations","text":"For the references see üéì.","category":"page"},{"location":"gmca/#gMCA-1","page":"gMCA","title":"gMCA","text":"","category":"section"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"Generalized Maximum Covariance Analysis (gMCA) is a multiple approximate joint diagonalization prodedure generalizing the maximum covariance analysis (MCA) to the situation m2 (number of datasets), as for MCA with k=1 (one observation).","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"Let X_1X_m be a set of m data matrices of dimension nt, where n is the number of variables and t the number of samples, both common to all datasets. From these data matrices let us estimate","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"C_ij=frac1TX_iX_j^H, for all ij1m, hspace1cm [gmca.1]","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"i.e., all covariance (i=j) and cross-covariance (ij) matrices.","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"The gMCA seeks m matrices F_1F_m diagonalizing as much as possible all products","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"F_i^H C_ij F_j, for all ij1m. hspace1cm [gmca.2]","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"If the MCA (m=2) diagonalizes the cross-covariance, this generalized model (m2) diagonalizes all cross-covariance matrices.","category":"page"},{"location":"gmca/#alternative-model-for-gMCA-1","page":"gMCA","title":"alternative model for gMCA","text":"","category":"section"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"The gMCA constructors also allow to seeks m matrices F_1F_m diagonalizing as much as possible all products","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"F_i^H C_ij F_j, for all ij1m. hspace1cm [gmca.3]","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"As compared to model [gmca.2], this model diagonalizes the covariance matrices in addition to the cross-covariance matrices.","category":"page"},{"location":"gmca/#permutation-for-gMCA-1","page":"gMCA","title":"permutation for gMCA","text":"","category":"section"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"As usual, the approximate diagonalizers F_1F_m are arbitrary up to a scale and permutation. In mGCA scaling is fixed by appropriate constraints. For the remaining sign and permutation ambiguities, Diagonalizations.jl attempts to solve them by finding signed permutation matrices for F_1F_m so as to make all diagonal elements of [gmca.2] or [gmca.3] positive and sorted in descending order.","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"Let","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"Œª=Œª_1Œª_n  hspace1cm [gmca.4]","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"be the diagonal elements of","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"frac1m^2-msum_ij=1^m(F_i^H C_ij F_j) hspace1cm [gmca.5]","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"and œÉ_TOT=sum_i=1^nŒª_i be the total covariance.","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"We denote widetildeF_i=f_i1 ldots f_ip the matrix holding the first pn column vectors of F_i, for i1m, where p is the subspace dimension. The explained variance is given by","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"œÉ_p=fracsum_i=1^pŒª_iœÉ_TOT, hspace1cm [gmca.6]","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"and the accumulated regularized eigenvalues (arev) by","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"œÉ_j=sum_i=1^jœÉ_i, for j=1 ldots n, hspace1cm [gmca.7]","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"where œÉ_i is given by Eq. [gmca.6].","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the gMCA constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector (see subspace dimension). By default, eVar is set to 0.999.","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"Solution","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"There is no closed-form solution to the gMCA problem in general. Diagonalizations.jl implements the following iterative algorithms:","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"Algorithm Constraint Reference\nOJoB F orthogonal Congedo et al (2011, 2012); Congedo (2013)","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"Constructors","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"One constructor is available (see here below). The constructed LinearFilter object holding the gMCA will have fields:","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":".F: vector of matrices widetildeF_1widetildeF_m with columns holding the first p eigenvectors in F_1F_m, or just F_1F_m if p=n","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":".iF: the vector of the left-inverses of the matrices in .F","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":".D: the leading pp block of Œõ, i.e., the elements [gmca.4] associated to the matrices in .F in diagonal form.","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":".eVar: the explained variance [gmca.6] for the chosen value of p.","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":".ev: the vector Œª [gmca.4].","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":".arev: the accumulated regularized eigenvalues, defined by Eq. [gmca.7].","category":"page"},{"location":"gmca/#","page":"gMCA","title":"gMCA","text":"gmca","category":"page"},{"location":"gmca/#Diagonalizations.gmca","page":"gMCA","title":"Diagonalizations.gmca","text":"function gmca(ùêó::VecMat;\n              covEst     :: StatsBase.CovarianceEstimator = SCM,\n              dims       :: Into    = ‚óã,\n              meanX      :: Into    = 0,\n          algorithm :: Symbol    = :OJoB,\n          fullModel :: Bool      = false,\n          sort      :: Bool      = true,\n          init      :: VecMato   = ‚óã,\n          tol       :: Real      = 0.,\n          maxiter   :: Int       = 1000,\n          verbose   :: Bool      = false,\n        eVar     :: TeVaro   = _minDim(ùêó),\n        eVarMeth :: Function = searchsortedfirst,\n        simple   :: Bool     = false)\n\n\nReturn a LinearFilter object.\n\nGeneralized Maximum Covariance Analysis of the set of m data matrices ùêó using the given solving algorithm (OJoB by default).\n\nIf fullModel is true, the [gmca.3] problem here above is solved, otherwise (default), the [gmca.2] problem here above is solved.\n\nIf sort is true (default), the column vectors of the matrices F_1F_m are signed and permuted as explained here above in permutation for gMCA, otherwise they will have arbitrary sign and will be in arbitrary order.\n\nA vector of matrices can be passed with the init argument in order to initialize the matrices F_1F_m to be found by the gMCA algorithm. If nothing is passed (default), matrices F_i is initialized, following Congedo et al. (2011)üéì, with the eigevector matrix of\n\nfrac1msum_j=1^m C_ijC_ij^H.\n\ntol is the tolerance for convergence of the solving algorithm. By default it is set to the square root of Base.eps of the nearest real type of the data input. This corresponds to requiring the relative change across two successive iterations of the average squared norm of the column vectors of F to vanish for about half the significant digits. If the solving algorithm encounters difficulties in converging, try setting tol in between 1e-6 and 1e-3.\n\nmaxiter is the maximum number of iterations allowed to the solving algorithm (1000 by default). If this maximum number of iteration is attained, a warning will be printed in the REPL. In this case, try increasing maxiter and/or tol.\n\nIf verbose is true (false by default), the convergence attained at each iteration will be printed in the REPL.\n\neVar and eVarMeth are used to define a subspace dimension p using the accumulated regularized eigenvalues of Eq. [gmca.7].\n\nThe default values are:\n\neVar is set to the minimum dimension of the matrices in ùêó\neVarMeth=searchsortedfirst\n\nIf simple is set to true, p is set equal to the dimension of the covariance matrices that are computed on the matrices in ùêó, which depends on the choice of dims, and only the fields .F and .iF are written in the constructed object. This corresponds to the typical output of approximate diagonalization algorithms.\n\nSee also: MCA, gCCA, mAJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\n#  Create data for testing the case k=1, m>1 #\n# `t` is the number of samples,\n# `m` is the number of datasets,\n# `n` is the number of variables,\n# `noise` must be smaller than 1.0. The smaller the noise,\n#  the more data are correlated.\nfunction getData(t, m, n, noise)\n    # create m identical data matrices and rotate them by different\n    # random orthogonal matrices V_1,...,V_m\n    ùêï=[randU(n) for i=1:m] # random orthogonal matrices\n    X=randn(n, t)  # data common to all subjects\n    # each subject has this common part plus a random part\n    ùêó=[ùêï[i]'*((1-noise)*X + noise*randn(n, t)) for i=1:m]\n    return ùêó\nend\n\nt, m, n, noise = 20, 2, 6, 0.1\nXset=getData(t, m, n, noise)\nCx=(Xset[1]*Xset[1]')/t\nCy=(Xset[2]*Xset[2]')/t\nCxy=(Xset[1]*Xset[2]')/t\n\n# check that for the case m=2 GMCA gives the same result as MCA\ngm=gmca(Xset; simple=true)\n\nm=mca(Cxy; simple=true)\n\n@test (m.F[1]'*Cxy*m.F[2]) ‚âà (gm.F[1]'*Cxy*gm.F[2])\n# the following must be the identity matrix out of a possible sign ambiguity\n@test abs.(m.F[1]'*gm.F[1]) ‚âà I\n@test abs.(m.F[2]'*gm.F[2]) ‚âà I\n\ncase m>2\n\nt, m, n, noise = 20, 4, 6, 0.1\nXset=getData(t, m, n, noise)\n\n# gmca selecting subspace dimension allowing an explained variance = 0.9\ngm=gmca(Xset, eVar=0.9)\n\n# name of the filter\ngm.name\n\nùíû=Array{Matrix}(undef, 1, m, m)\nfor i=1:m, j=1:m ùíû[1, i, j]=(Xset[i]*Xset[j]')/t end\n\nusing Plots\n# plot regularized accumulated eigenvalues\nplot(gm.arev)\n\n# plot the original cross-covariance matrices and the rotated\n# cross-covariance matrices\n\n# Get all products ùêî[i]' * ùíû[l, i, j] * ùêî[j]\nfunction _rotate_crossCov(ùêî, ùíû, m, k)\n    ùíÆ=Array{Matrix}(undef, k, m, m)\n    @inbounds for l=1:k, i=1:m, j=1:m ùíÆ[l, i, j]=ùêî[i]'*ùíû[l, i, j]*ùêî[j] end\n    return ùíÆ\nend\n\n# Put all cross-covariances in a single matrix of dimension m*n x m*n for visualization\nfunction ùíû2Mat(ùíû::AbstractArray, m, k)\n    n=size(ùíû[1, 1, 1], 1)\n    C=Matrix{Float64}(undef, m*n, m*n)\n    for i=1:m, j=1:m, x=1:n, y=1:n C[i*n-n+x, j*n-n+y]=ùíû[k, i, j][x, y] end\n    return C\nend\n\nC=ùíû2Mat(ùíû, m, 1)\n Cmax=maximum(abs.(C));\n h1 = heatmap(C, clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all (mxm) cross-covariances\")\n ùíÆ=_rotate_crossCov(gm.F, ùíû, m, 1)\n S=ùíû2Mat(ùíÆ, m, 1)\n Smax=maximum(abs.(S));\n h2 = heatmap(S, clim=(0, Smax), yflip=true, c=:amp, title=\"all rotated cross-covariances\")\n üìà=plot(h1, h2, size=(700,300))\n\n\n(Image: Figure gMCA)\n\nIn the figure here above, the rotated cross-covariance matrices have the expected  strip-diagonal form, that is, each block F_i^Tfrac1T(X_iX_j^T)F_j,  for ij1m, is approximately diagonal. Each block is 55 because  setting eVar=0.9 the subspace dimension has been set to 5.\n\n\n\n\n\n","category":"function"},{"location":"cca/#CCA-1","page":"CCA","title":"CCA","text":"","category":"section"},{"location":"cca/#","page":"CCA","title":"CCA","text":"Canonical Correlation Analysis was first proposed by Hotelling (1936) üéì. It can be conceived as the multivariate extension of Pearson's product-moment correlation, as the bilinear version of Whitening or as the standardized version of MCA; if MCA maximizes the cross-covariance of two data set, CCA maximizes their correlation. Like the MCA, the CCA corresponds to the situation m=2 (two datasets) and k=1 (one observation).","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"As per MCA, Let X and Y be two n_xt and n_yt data matrices, where n_x and n_y are the number of variables in X and Y, respectively and t the number of samples. We assume here too that the samples in X and Y are synchronized. Let C_x be the n_xn_x covariance matrix of X and C_y be the n_yn_y covariance matrix of Y. Let also C_xy=frac1tX^HY be the n_xn_y cross-covariance matrix. CCA seeks two matrices F_x and F_y such that","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"left  beginarrayrlF_x^HC_xF_x=IF_y^HC_yF_y=IF_x^HC_xyF_y=Œõ endarray right, hspace1cm [cca.1]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"where Œõ is a nn diagonal matrix, with n=min(n_x n_y). The first components (rows) of F_x^HX and F_y^HY hold the linear combination of X and Y with maximal correlation, the second the linear combination with maximal residual correlation and so on, subject to constraint [cca.1].","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"In matrix form this can be written such as","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"beginpmatrix F_x^H  00  F_y^Hendpmatrix beginpmatrix C_x  C_xyC_xy^H  C_yendpmatrix beginpmatrix F_x  00  F_yendpmatrix = beginpmatrix I  ŒõŒõ  Iendpmatrix. hspace1cm [cca.2]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"If n_x=n_y, from [cca.1] it follows","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"left  beginarrayrlF_x^-HF_x^-1=C_xF_y^-HF_y^-1=C_yF_x^-HF_y^-1=C_xy endarray right, hspace1cm [cca.3]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"that is, CCA is a special kind of full-rank factorization of C_x and C_y.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"Equating the left hand sides of the first two expressions in [cca.1] and setting E_x=B_xB_y^-H, E_y=B_yB_x^-H, it follows","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"left  beginarrayrlC_x=E_xC_yE_x^HC_y=E_yC_xE_y^H endarray right, hspace1cm [cca.4]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"that is, CCA defines a linear transormation linking the covariance matrices of two data sets.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"Since it maximizes the correlation, differently from MCA, CCA is not sensitive to the amplitude of the two processes. This should be kept in mind, as the correlation of two signals may be high even if the amplitude of one of the two signal is very low, say, at the noise level. In such a case the resulting correlation is meaningless.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"The accumulated regularized eigenvalues (arev) for the CCA are defined as","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"œÉ_j=sum_i=1^jœÉ_i, for j=1 ldots n, hspace1cm [cca.5]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"where œÉ_i is given by","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"œÉ_p=fracsum_i=1^pŒª_iœÉ_TOT  hspace1cm [cca.6]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"and Œª_i are the singular values in Œõ of [cca.1].","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the CCA constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector (see subspace dimension). By default, eVar is set to 0.999.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"Solution","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"If n_x=n_y the solutions to the CCA B_x and B_y are given by the eigenvector matrix of (non-symmetric) matrices C_x^-1C_xyC_y^-1C_yx and C_y^-1C_yxC_x^-1C_xy, respecively.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"A numerically preferable solution, accommodating also the case n_xn_y, is the following two-step procedure, which is the one here implemented:","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"get some whitening matrices hspace01cm(W_x W_y)hspace01cm such that hspace01cmW_x^HC_xW_x=Ihspace01cm and hspace01cmW_y^HC_yW_y=I\ndo hspace01cmtextrmSVD(W_x^HC_xyW_y)=U_xŒõU_y^H","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"The solutions are hspace01cmB_x=W_xU_xhspace01cm and hspace01cmB_y=W_yU_yhspace01cm.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"Constructors","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"Three constructors are available (see here below). The constructed LinearFilter object holding the CCA will have fields:","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".F[1]: matrix widetildeB_x=b_x1 ldots b_xp with the columns holding the first p vectors in B_x.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".F[2]: matrix widetildeB_y=b_y1 ldots b_yp with the columns holding the first p vectors in B_y.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".iF[1]: the left-inverse of .F[1]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".iF[2]: the left-inverse of .F[2]","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".D: the leading pp block of Œõ, i.e., the correlation values associated to .F in diagonal form.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".eVar: the explained variance for the chosen value of p, defined in [cca.6].","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".ev: the vector diag(Œõ) holding all n correlation values.","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":".arev: the accumulated regularized eigenvalues, defined in [cca.5].","category":"page"},{"location":"cca/#","page":"CCA","title":"CCA","text":"cca","category":"page"},{"location":"cca/#Diagonalizations.cca","page":"CCA","title":"Diagonalizations.cca","text":"(1)\nfunction cca(Cx :: SorH, Cy :: SorH, Cxy :: Mat;\n             eVarCx   :: TeVaro=‚óã,\n             eVarCy   :: TeVaro=‚óã,\n             eVar     :: TeVaro=‚óã,\n             eVarMeth :: Function=searchsortedfirst,\n             simple   :: Bool=false)\n\n(2)\nfunction cca(X::Mat, Y::Mat;\n             covEst   :: StatsBase.CovarianceEstimator=SCM,\n             dims     :: Into = ‚óã,\n             meanX    :: Tmean = 0,\n             meanY    :: Tmean = 0,\n             wX       :: Tw = ‚óã,\n             wY       :: Tw = ‚óã,\n             wXY      :: Tw = ‚óã,\n          eVarCx   :: TeVaro = ‚óã,\n          eVarCy   :: TeVaro = ‚óã,\n          eVar     :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          simple   :: Bool = false)\n\n(3)\nfunction cca(ùêó::VecMat, ùêò::VecMat;\n             covEst   :: StatsBase.CovarianceEstimator=SCM,\n             dims     :: Into = ‚óã,\n             meanX    :: Into = 0,\n             meanY    :: Into = 0,\n          eVarCx   :: TeVaro = ‚óã,\n          eVarCy   :: TeVaro = ‚óã,\n          eVar     :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          simple   :: Bool = false,\n       metric   :: Metric = Euclidean,\n       wCx      :: Vector = [],\n       wCy      :: Vector = [],\n       ‚úìw       :: Bool = true,\n       initCx   :: SorHo = nothing,\n       initCy   :: SorHo = nothing,\n       tol      :: Real = 0.,\n       verbose  :: Bool = false)\n\nReturn a LinearFilter object:\n\n(1) Canonical correlation analysis with covariance matrix Cx of dimension n_xn_x, covariance matrix Cy of dimension n_yn_y and cross-covariance matrix Cxy of dimension n_xn_y as input.\n\nCx and Cy must be flagged as Symmetric or Hermitian, see data input. Instead Cxy is a generic Matrix object since it is not symmetric/Hermitian, left alone square.\n\neVarCx, eVarCy, eVar and eVarMeth are keyword optional arguments for defining the subspace dimension p. Particularly:\n\neVarCx and eVarCy are used to determine a subspace dimension in the whitening of Cx and Cy, i.e., in the first step of the two-step procedure descrived above in the solution section.\neVar is used to determine the final subspace dimension using the .arev vector given by Eq. [cca.5] here above.\neVarMeth applies to eVarCx, eVarCy and eVar.\n\nThe default values are:\n\neVarCx=0.999\neVarCy=0.999\neVar=0.999\neVarMeth=searchsortedfirst\n\nIf simple is set to true, p is set equal to min(n_x n_y) and only the fields .F and .iF are written in the constructed object. This option is provided for low-level work when you don't need to define a subspace dimension or you want to define it by your own methods.\n\n(2) Canonical correlation analysis with data matrices X and Y as input.\n\nX and Y are real or complex data matrices.\n\ncovEst, dims, meanX, meanY,  wX, wY and wXY are optional keyword arguments to regulate the estimation of the covariance matrices of X and Y and their cross-covariance matrix C_xy. Particularly (See covariance matrix estimations),\n\nmeanX is the mean argument for data matrix X.\nmeanY is the mean argument for data matrix Y.\nwX is the w argument for estimating a weighted covariance matrix C_x.\nwY is the w argument for estimating a weighted covariance matrix C_y.\nwXY is the w argument for estimating a weighted  cross-covariance matrix C_XY.\ncovEst applies only to the estimation of C_x and C_y.\n\nOnce C_x, C_y and C_xy estimated, method (1) is invoked with optional keyword arguments eVar, eVarCx, eVarCy, eVarMeth and simple. See method (1) for details.\n\n(3) Canonical correlation analysis with two vectors of data matrices ùêó and ùêò as input. ùêó and ùêò must hold the same number of matrices and corresponding pairs of matrices therein must comprise the same number of samples.\n\ncovEst, dims, meanX and meanY are optional keyword arguments to regulate the estimation of the covariance matrices of all matrices in ùêó and ùêò and the cross-covariance matrices for all pairs of their corresponding data matrices. See method (2) and covariance matrix estimations.\n\nA mean of these covariance matrices is computed. For the cross-covariance matrices the arithmetic mean is used. For the covariance matrices of ùêó and ùêò, optional keywords arguments metric, wCx, wCy, ‚úìw, initCx, initCy, tol and verbose are used to allow non-Euclidean mean estimations. Particularly (see mean covariance matrix estimations),\n\nwCx are the weights for the covariance matrices of ùêó,\nwCy are the weights for the covariance matrices of ùêò,\ninitCx is the initialization for the mean of the covariance matrices of ùêó,\ninitCy is the initialization for the mean of the covariance matrices of ùêò.\n\nBy default, the arithmetic mean is computed.\n\nOnce the mean covariance and cross-covariance matrices are estimated, method (1) is invoked with optional keyword arguments eVarCx, eVarCy, eVar, eVarMeth and simple. See method (1) for details.\n\nSee also: Whitening, MCA, gCCA, mAJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\nn, t=10, 100\nX=genDataMatrix(n, t)\nY=genDataMatrix(n, t)\n\nCx=Symmetric((X*X')/t)\nCy=Symmetric((Y*Y')/t)\nCxy=(X*Y')/t\n\n# Method (1)\ncC=cca(Cx, Cy, Cxy, simple=true)\n@test cC.F[1]'*Cx*cC.F[1]‚âàI\n@test cC.F[2]'*Cy*cC.F[2]‚âàI\nD=cC.F[1]'*Cxy*cC.F[2]\n@test norm(D-Diagonal(D))+1‚âà1.\n\n# Method (2)\ncXY=cca(X, Y, simple=true)\n@test cXY.F[1]'*Cx*cXY.F[1]‚âàI\n@test cXY.F[2]'*Cy*cXY.F[2]‚âàI\nD=cXY.F[1]'*Cxy*cXY.F[2]\n@test norm(D-Diagonal(D))+1‚âà1.\n\n@test cXY==cC\n\nk=10\nXset=[genDataMatrix(n, t) for i=1:k]\nYset=[genDataMatrix(n, t) for i=1:k]\n\n# Method (3)\n# canonical correlation analysis of the average covariance and cross-covariance\nc=cca(Xset, Yset)\n\n# ... selecting subspace dimension allowing an explained variance = 0.5\nc=cca(Xset, Yset; eVar=0.5)\n\n# ... subtracting the mean from the matrices in Xset and Yset\nc=cca(Xset, Yset; meanX=nothing, meanY=nothing, eVar=0.5)\n\n# cca on the average of the covariance and cross-covariance matrices\n# computed along dims 1\nc=cca(Xset, Yset; dims=1, eVar=0.5)\n\n# name of the filter\nc.name\n\nusing Plots\n# plot regularized accumulated eigenvalues\nplot(c.arev)\n\n# plot the original covariance and cross-covariance matrices\n# and their transformed counterpart\n CxyMax=maximum(abs.(Cxy));\n h1 = heatmap(Cxy, clim=(-CxyMax, CxyMax), title=\"Cxy\", yflip=true, c=:bluesreds);\n D=cC.F[1]'*Cxy*cC.F[2];\n Dmax=maximum(abs.(D));\n h2 = heatmap(D, clim=(0, Dmax), title=\"F1'CxyF2\", yflip=true, c=:amp);\n CxMax=maximum(abs.(Cx));\n h3 = heatmap(Cx, clim=(-CxMax, CxMax), title=\"Cx\", yflip=true, c=:bluesreds);\n h4 = heatmap(cC.F[1]'*Cx*cC.F[1], clim=(0, 1), title=\"F1'CxF1\", yflip=true, c=:amp);\n CyMax=maximum(abs.(Cy));\n h5 = heatmap(Cy, clim=(-CyMax, CyMax), title=\"Cy\", yflip=true, c=:bluesreds);\n h6 = heatmap(cC.F[2]'*Cy*cC.F[2], clim=(0, 1), title=\"F2'CyF2\", yflip=true, c=:amp);\n üìà=plot(h3, h5, h1, h4, h6, h2, size=(800,400))\n\n\n(Image: Figure CCA)\n\n\n\n\n\n","category":"function"},{"location":"mca/#MCA-1","page":"MCA","title":"MCA","text":"","category":"section"},{"location":"mca/#","page":"MCA","title":"MCA","text":"Maximum Covariance Analysis is obtained by singular-value decomposition. It can be conceived as the multivariate extension of covariance and as the bilinear version of PCA; if PCA diagonalizes the covariance matrix of a data set, MCA diagonalized the cross-covariance matrix of two data sets. It corresponds to the situation m=2 (two datasets) and k=1 (one observation).","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"Let X and Y be two n_xt and n_yt data matrices, where n_x and n_y are the number of variables in X and Y, respectively and t the number of samples. We assume that the samples in X and Y are synchronized. Let C_xy=frac1tX^HY be the n_xn_y cross-covariance matrix. MCA seeks two orthogonal matrices U and V such that","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"U_x^HC_xyU_y=Œõ, hspace1cm [mca.1]","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"where Œõ is a nn diagonal matrix, with n=min(n_x n_y). The first components (rows) of U_x^HX and U_y^HY hold the linear combination of X and Y with maximal covariance, the second the linear combination with maximal residual covariance and so on, subject to constraint U_x^HU_x=I and U_y^HU_x=I. If n_x=n_y, U_x and U_y are both square, hence it holds also U_xU_x^H=I and U_yU_y^H=I, otherwise this holds only for one of them.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"It should be kept in mind that MCA is sensitive to the amplitude of each process, since the covariance is maximized and not the correlation as in CCA. Threfore, if the amplitude of the two processes is not homegeneous, the covariance will be driven by the process with highest amplitude.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"The accumulated regularized eigenvalues (arev) for the MCA are defined as","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"œÉ_j=sum_i=1^jœÉ_i, for j=1 ldots n, hspace1cm [mca.2]","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"where œÉ_i is given by","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"œÉ_p=fracsum_i=1^pŒª_iœÉ_TOT  hspace1cm [mca.3]","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"and Œª_i are the singular values in Œõ of [mca.1].","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the MCA constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector (see subspace dimension). By default, eVar is set to 0.999.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"Solution","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"The MCA solution is given by the singular value decoposition of C_xy","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"textrmSVD(C_xy)=U_xŒõU_y^H.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"It is worth mentioning that","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"widetildeU_xwidetildeŒõwidetildeU_y^H,","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"where widetildeU_x=u_x1 ldots u_xp is the matrix holding the first pn_x left singular vectors, widetildeU_y=u_y1 ldots u_yp is the matrix holding the first pn_y right singular vectors and widetildeŒõ is the leading pp block of Œõ, is the best approximant to C_xy with rank p in the least-squares sense (Good, 1969)üéì.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"Constructors","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"Three constructors are available (see here below). The constructed LinearFilter object holding the MCA will have fields:","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".F[1]: matrix widetildeU_x with orthonormal columns holding the first p left singular vectors in U_x.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".F[2]: matrix widetildeU_y with orthonormal columns holding the first p right singular vectors in U_y.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".iF[1]: the (conjugate) transpose of .F[1]","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".iF[2]: the (conjugate) transpose of .F[2]","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".D: the leading pp block of Œõ, i.e., the singular values associated to .F in diagonal form.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".eVar: the explained variance for the chosen value of p, defined in [mca.3].","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".ev: the vector diag(Œõ) holding all n singular values.","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":".arev: the accumulated regularized eigenvalues, defined in [mca.2].","category":"page"},{"location":"mca/#","page":"MCA","title":"MCA","text":"mca","category":"page"},{"location":"mca/#Diagonalizations.mca","page":"MCA","title":"Diagonalizations.mca","text":"(1)\nfunction mca(Cxy :: Mat;\n             eVar      :: TeVaro = ‚óã,\n             eVarMeth  :: Function = searchsortedfirst,\n             simple    :: Bool = false)\n\n(2)\nfunction mca(X::Mat, Y::Mat;\n             dims     :: Into = ‚óã,\n             meanX    :: Tmean = 0,\n             meanY    :: Tmean = 0,\n             wXY      :: Tw = ‚óã,\n          eVar     :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          simple   :: Bool = false)\n\n(3)\nfunction mca(ùêó::VecMat, ùêò::VecMat;\n             dims     :: Into = ‚óã,\n             meanX    :: Into = 0,\n             meanY    :: Into = 0,\n          eVar     :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          simple   :: Bool = false)\n\nReturn a LinearFilter object:\n\n(1) Maximum covariance analysis with covariance matrix Cxy of dimension n_xn_y as input.\n\nDifferently from PCA and Whitening, Cxy is a generic Matrix object since it is not symmetric/Hermitian, left alone square.\n\neVar and eVarMeth are keyword optional arguments for defining the subspace dimension p using the .arev vector given by Eq. [mca.2].\n\nThe default values are:\n\neVar=0.999\neVarMeth=searchsortedfirst\n\nIf simple is set to true, p is set equal to min(n_x n_y) and only the fields .F and .iF are written in the constructed object. This option is provided for low-level work when you don't need to define a subspace dimension or you want to define it by your own methods.\n\n(2) Maximum covariance analysis with data matrices X and Y as input.\n\nX and Y are real or complex data matrices.\n\ndims, meanX, meanY and wXY are optional keyword arguments to regulate the estimation of the cross-covariance matrix C_xy. Particularly (see covariance matrix estimations),\n\nmeanX is the mean argument for data matrix X.\nmeanY is the mean argument for data matrix Y.\nwXY is the weight argument for estimating a weighted cross-covariance matrix C_XY.\n\nOnce the cross-covariance matrix estimated, method (1) is invoked with optional keyword arguments eVar, eVarMeth and simple. See method (1) for details.\n\n(3) Maximum covariance analysis with two vectors of data matrices ùêó and ùêò as input. ùêó and ùêò must hold the same number of matrices and corresponding pairs of matrices therein must comprise the same number of samples.\n\ndims, meanX and meanY are optional keyword arguments to regulate the estimation of the cross-covariance matrices for all pairs of corresponding data matrices in ùêó and ùêò. See method (2) and covariance matrix estimations.\n\nThe arithmetic mean of these cross-covariance matrices is computed and method (1) is invoked with optional keyword arguments eVar, eVarMeth and simple. See method (1) for details.\n\nSee also: PCA, CCA, gMCA, mAJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\nn, t=10, 100\nX=genDataMatrix(n, t)\nY=genDataMatrix(n, t)\n\nCx=Symmetric((X*X')/t)\nCy=Symmetric((Y*Y')/t)\nCxy=(X*Y')/t\n\n# Method (1)\nmC=mca(Cxy, simple=true)\n@test Cxy‚âàmC.F[1]*mC.D*mC.F[2]'\nD=mC.F[1]'Cxy*mC.F[2]\n@test norm(D-Diagonal(D))+1‚âà1.\n\n# Method (2)\nmXY=mca(X, Y, simple=true)\nD=mXY.F[1]'*Cxy*mXY.F[2]\n@test norm(D-Diagonal(D))+1‚âà1.\n@test mXY==mC\n\nk=10\nXset=[genDataMatrix(n, t) for i=1:k]\nYset=[genDataMatrix(n, t) for i=1:k]\n\n# Method (3)\n# maximum covariance analysis of the average covariance and cross-covariance\nm=mca(Xset, Yset)\n\n# ... selecting subspace dimension allowing an explained variance = 0.5\nm=mca(Xset, Yset; eVar=0.5)\n\n# ... subtracting the mean from the matrices in Xset and Yset\nm=mca(Xset, Yset; meanX=nothing, meanY=nothing, eVar=0.5)\n\n# mca on the average of the covariance and cross-covariance matrices\n# computed along dims 1\nm=mca(Xset, Yset; dims=1, eVar=0.5)\n\n# name of the filter\nm.name\n\nusing Plots\n# plot regularized accumulated eigenvalues\nplot(m.arev)\n\n# plot the original cross-covariance matrix and the rotated\n# cross-covariance matrix\n Cmax=maximum(abs.(Cxy));\n h1 = heatmap(Cxy, clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"Cxy\");\n D=mC.F[1]'*Cxy*mC.F[2];\n Dmax=maximum(abs.(D));\n h2 = heatmap(D, clim=(0, Dmax), yflip=true, c=:amp, title=\"F[1]'*Cxy*F[2]\");\n üìà=plot(h1, h2, size=(700,300))\n\n(Image: Figure MCA)\n\n\n\n\n\n","category":"function"},{"location":"csp/#CSP-1","page":"CSP","title":"CSP","text":"","category":"section"},{"location":"csp/#","page":"CSP","title":"CSP","text":"The Common Spatial Pattern (CSP) are filters obtained by generalized eigenvalue-eigenvector decomposition. They corresponds to the situation m=1 (one dataset) and k=2 (two observation). The goal of a CSP filter is to maximize a variance ratio. Let (X_1 X_2) be (nt_1 nt_2) data matrices, where n is their number of variables and (t_1 t_2) their number of samples. Let (C_1 C_2) be the nn covariance matrices of data matrices (X_1 X_2) and C=C_1+C_2. The CSP consists in the joint diagonalization of C and C_1 or, equivalently, of C and C_2 (Fukunaga, 1990, p. 31-33 üéì). The joint diagonalizer B is scaled such as to verify (see scale and permutation)","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"left  beginarrayrlB^TCB=IB^TC_1B=ŒõB^TC_2B=I-Œõ endarray right, hspace1cm [csp.1]","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"That is to say, Œª_1ldotsŒª_n are the diagonal elements of B^TC_1B and 1-Œª_1ldots1-Œª_n the diagonal elements of B^TC_2B. The CSP maximizes the ratio between the variance of the corresponding components of transformed processes B^TX_1 and B^TX_2, constraining their sum to unity. The ratio is ordered by descending order such as","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"œÉ=Œª_1(1-Œª_1)ldotsŒª_n(1-Œª_n), hspace1cm [csp.2]","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"The CSP has two use cases, which can be selected using the selMeth optional keyword argument of its constructors:","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"a) Separating two classes.   In this case C_1 and C_2 are   covariance matrices of two distinct classes. The constructors will   retain a filter with form   widetildeB=B_1 B_2, where we have defined partitions   B=B_1 B_0 B_2. B_1 and B_2 are the first p_1 and last p_2 vectors of B corresponding to high and low values of   the variance ratio [csp.2], that is, explaining variance   that is useful for separating the classes, while B_0 corresponds   to components corresponding to variance ratios close to 1,   meaning that are not useful for separating the classes.   The subspace dimension in this use case will be given by p=p_1+p_2.   Notice that in Diagonalizations.jl we allow p_1p_2.\nb) Enhance the signal-to-noise ratio.   In this case C_1 and C_2 are   covariance matrices of the 'signal' and of the 'noise', respectively.   The constructors will retain a filter widetildeB=b_1 ldots b_p holding the first p vectors of B corresponding to the highest   values of the variance ratio [csp.2]. The discared n-p vectors   correspond to components that explains progressively more and more   variance related to the noise process. In this case we have   a natural landmark for selecting automatically the   subspace dimension p, as the larger dimension   whose variance ratio is greater then 1.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"In order to retrive the appropriate partitions of B to construct a filter given a subspace dimension p, we need a way to measure the distance of the ratios [csp.2] from 1. For this purpose we will make use of the Fisher distance adopted on the Riemannian manifold of positive definite matrices, in its scalar form, yielding","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"Œ¥_i=textrmlog^2(œÉ_i), for i=1 ldots n. hspace1cm [csp.3]","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"After this transformation, extreme values of the ratio becomes high, that is, the function Œ¥_i assumes the shape of a (non-symmetric) wine cup and has a minimum close to zero.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"Now let Œ¥_TOT=sum_i=1^nŒ¥_i be the total distance and define the explained variance of the CSP for dimension p such as","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"v_p=fracsum_j=1^pŒ¥_jŒ¥_TOT, hspace1cm [csp.4]","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"where the Œ¥_j's are given by [csp.3]. Note that for use case a) described here above the accumulated sums in [csp.4] are computed after sorting the Œ¥_i values in descending order.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"The arev field of CSP filter is defined as the accumulated variance ratio given by","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"v_1ldotsv_n, hspace1cm [csp.5]","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"where the v_i's' are defined in [csp.4].","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the CSP constructors either to an integer or to a real number (see subspace dimension). If you don't, by default p is chosen (see Fig. 2)","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"in use case a) as the larger dimension p whose sorted Œ¥_p value [csp.3]  is larger then the geometric mean of Œ¥ 1. n2 is taken as upper bound.\nin use case b) as the larger dimension p whose œÉ_p value [csp.2] is larger then 1.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"In both cases the dimension corresponding to the munimum of [csp.3] is taken  as an upper bound and p can be equal to at most n-1.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"(Image: Figure 2)  Figure 2 Illustration of the way CSP constrcuctors determines  automatically the subspace dimension p under use case a) and b).  On the left, we are interested in the p_1 and p_2 vectors of B  associated with extremal values of the variance ratios [csp.2],  which are the high values of Œ¥ [csp.3] enclosed in the shaded boxes  of the figure. The threshold is set to the geometric mean  of Œ¥. Since Diagonalizations.jl always sorts the explained variance  in descending order, widetildeB is defined as  b_1 b_10 b_9 b_2 b_8 b_3.  On the right, we are interested in the first p vectors of  B associated with positive values of the variance ratios [csp.2],  which are the high values on the left of the minimum of Œ¥ enclosed  in the shaded box of the figure.  The threshold is set in this case to the first value of œÉ [csp.2]  smaller then 1, which roughly coincides with the minimum of Œ¥  reported in the figure. Assuming in this example they do coincide,  widetildeB would be defined as b_1 ldots b_5.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"Solution","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"The CSP solution B is given by the generalized eigenvalue-eigenvector decomposition of the pair (C C_1).","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"A numerically preferable solution is the following two-step procedure:","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"get a whitening matrix hspace01cmWhspace01cm such that hspace01cmW^TCW=Ihspace01cm.\ndo hspace01cmtextrmEVD(W^TC_1W)=UŒõU^T","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"The solution is hspace01cmB=WU.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"Constructors","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"Three constructors are available (see here below). The constructed LinearFilter object holding the CSP will have fields:","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":".F: matrix widetildeB as defined above. This is just B of [csp.1] if optional keyword argument simple=true is passed to the constructors (see below).","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":".iF: the left-inverse of .F","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":".D: the pp diagonal matrix with the elements of Œõ [csp.1] corresponding to the vectors of widetildeB.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":".eVar: the explained variance for the chosen value of p, given by the p^th value of [csp.5]","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":".ev: the vector diag(Œõ) holding all n diagonal elements of matrix Œõ [csp.1].","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":".arev: the accumulated regularized eigenvalues, defined in [csp.5].","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"note: Nota Bene\n.eVar and .arev are computed on sorted Œ¥_i values in use case a), see [csp.5], [csp.4] and Fig. 2.","category":"page"},{"location":"csp/#","page":"CSP","title":"CSP","text":"csp","category":"page"},{"location":"csp/#Diagonalizations.csp","page":"CSP","title":"Diagonalizations.csp","text":"(1)\nfunction csp(C‚ÇÅ :: SorH, C‚ÇÇ :: SorH;\n             eVar     :: TeVaro = ‚óã,\n             eVarC    :: TeVaro = ‚óã,\n             eVarMeth :: Function = searchsortedfirst,\n             selMeth  :: Symbol = :extremal,\n             simple   :: Bool = false)\n\n(2)\nfunction csp(X‚ÇÅ :: Mat, X‚ÇÇ :: Mat;\n             covEst   :: StatsBase.CovarianceEstimator = SCM,\n             dims     :: Into = ‚óã,\n             meanX‚ÇÅ   :: Tmean = 0,\n             meanX‚ÇÇ   :: Tmean = 0,\n             wX‚ÇÅ      :: Tw = ‚óã,\n             wX‚ÇÇ      :: Tw = ‚óã,\n          eVar     :: TeVaro = ‚óã,\n          eVarC    :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          selMeth  :: Symbol = :extremal,\n          simple   :: Bool = false)\n\n(3)\nfunction csp(ùêó‚ÇÅ::VecMat, ùêó‚ÇÇ::VecMat;\n             covEst   :: StatsBase.CovarianceEstimator = SCM,\n             dims     :: Into = ‚óã,\n             meanX‚ÇÅ   :: Into = 0,\n             meanX‚ÇÇ   :: Into = 0,\n          eVar     :: TeVaro = ‚óã,\n          eVarC    :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          selMeth  :: Symbol = :extremal,\n          simple   :: Bool = false,\n       metric   :: Metric = Euclidean,\n       w‚ÇÅ       :: Vector = [],\n       w‚ÇÇ       :: Vector = [],\n       ‚úìw       :: Bool = true,\n       init‚ÇÅ    :: SorHo = nothing,\n       init‚ÇÇ    :: SorHo = nothing,\n       tol      :: Real = 0.,\n       verbose  :: Bool = false)\n\nReturn a LinearFilter object:\n\n(1) Common spatial pattern with covariance matrices C_1 and C_2 of dimension nn as input. The subscript of the covariance matrices refers to the dims used to compute it (see above).\n\neVar, eVarC and eVarMeth are keyword optional arguments for defining the subspace dimension p. Particularly:\n\nBy default, the two-step procedure described above is used to find the  solution. In this case eVarC is used for defining the subspace dimension of  the whitening step. If eVarC=0. is passed,  the solution will be find by the generalized eigenvalue-eigenvector procedure.\neVar is the keyword optional argument for defining the  subspace dimension p using the .arev vector  given by [csp.5].\neVarMeth applies to both eVarC and eVar. The default value is  evarMeth=searchsortedfirst.\n\nif selMeth=:extremal (default) use case a) Separating two classes described above is considered. Any other symbol for selMeth will instruct to consider instead the use case b) Enhance the signal-to-noise ratio.\n\nIf simple is set to true, p is set equal to n and only the fields .F and .iF are written in the constructed object. This option is provided for low-level work when you don't need to define a subspace dimension or you want to define it by your own methods.\n\n(2) Common spatial pattern with data matrices X‚ÇÅ and X‚ÇÇ as input.\n\nX‚ÇÅ and X‚ÇÇ are real or complex data matrices.\n\ncovEst, dims, meanX‚ÇÅ, meanX‚ÇÇ,  wX‚ÇÅ and wX‚ÇÇ are optional keyword arguments to regulate the estimation of the covariance matrices (C_1 C_2) of (X‚ÇÅ, X‚ÇÇ). Particularly (See covariance matrix estimations),\n\nmeanX‚ÇÅ is the mean argument for data matrix X‚ÇÅ.\nmeanX‚ÇÇ is the mean argument for data matrix X‚ÇÇ.\nwX‚ÇÅ is the w argument for estimating a weighted covariance matrix for X‚ÇÅ.\nwX‚ÇÇ is the w argument for estimating a weighted covariance matrix for X‚ÇÇ.\ncovEst applies to the estimations of both covariance matrices.\n\nOnce the two covariance matrices C_1 and C_2 estimated, method (1) is invoked with optional keyword arguments eVar, eVarC, eVarMeth, selMeth and simple. See method (1) for details.\n\n(3) Common spatial pattern with two vectors of data matrices ùêó‚ÇÅ and ùêó‚ÇÇ as input.\n\nùêó‚ÇÅ and ùêó‚ÇÇ do not need to hold the same number of matrices and the number of samples in the matrices they contain is arbitrary.\n\ncovEst, dims, meanX‚ÇÅ and meanX‚ÇÇ are optional keyword arguments to regulate the estimation of the covariance matrices for all matrices in ùêó‚ÇÅ and ùêó‚ÇÇ. See method (2) and covariance matrix estimations.\n\nA mean covariance matrix is computed separatedly from the covariance matrices computed from the data matrices in ùêó‚ÇÅ and ùêó‚ÇÇ, using optional keywords arguments metric, w‚ÇÅ, w‚ÇÇ, ‚úìw, init‚ÇÅ, init‚ÇÇ, tol and verbose. Particularly (see mean covariance matrix estimations),\n\nw‚ÇÅ are the weights for the covariance matrices computed from ùêó‚ÇÅ,\nw‚ÇÇ are the weights for the covariance matrices computed from ùêó‚ÇÇ,\ninit‚ÇÅ is the initialization for the mean of the covariance matrices computed from ùêó‚ÇÅ,\ninit‚ÇÇ is the initialization for the mean of the covariance matrices computed from ùêó‚ÇÇ.\n\nBy default, the arithmetic mean is computed.\n\nSee also: CSTP, PCA, AJD, mAJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\n# Method (1)\nt, n=50, 10\nX1=genDataMatrix(n, t)\nX2=genDataMatrix(n, t)\nCx1=Symmetric((X1*X1')/t)\nCx2=Symmetric((X2*X2')/t)\nC=Cx1+Cx2\ncC=csp(Cx1, Cx2; simple=true)\nDx1=cC.F'*Cx1*cC.F\n@test norm(Dx1-Diagonal(Dx1))+1‚âà1.\nDx2=cC.F'*Cx2*cC.F\n@test norm(Dx2-Diagonal(Dx2))+1‚âà1.\n@test cC.F'*C*cC.F‚âàI\n@test norm(Dx1-(I-Dx2))+1‚âà1.\n\n\n# Method (2)\nc12=csp(X1, X2, simple=true)\nDx1=c12.F'*Cx1*c12.F\n@test norm(Dx1-Diagonal(Dx1))+1‚âà1.\nDx2=c12.F'*Cx2*c12.F\n@test norm(Dx2-Diagonal(Dx2))+1‚âà1.\n@test c12.F'*C*c12.F‚âàI\n@test norm(Dx1-(I-Dx2))+1‚âà1.\n\n@test cC==c12\n\n\nk=10\nXset=[genDataMatrix(n, t) for i=1:k]\nYset=[genDataMatrix(n, t) for i=1:k]\n\n# Method (3)\n# CSP of the average covariance matrices\nc=csp(Xset, Yset)\n\n# ... selecting subspace dimension allowing an explained variance = 0.5\nc=csp(Xset, Yset; eVar=0.5)\n\n# ... subtracting the mean from the matrices in Xset and Yset\nc=csp(Xset, Yset; meanX‚ÇÅ=nothing, meanX‚ÇÇ=nothing, eVar=0.5)\n\n# csp on the average of the covariance and cross-covariance matrices\n# computed along dims 1\nc=csp(Xset, Yset; dims=1, eVar=0.5)\n\n# name of the filter\nc.name\n\nusing Plots\n# plot regularized accumulated eigenvalues\nplot(c.arev)\n\n\n# plot the original covariance matrices and the transformed counterpart\n# example when argument `selMeth` is `extremal` (default): 2-class separation\n cC=csp(Cx1, Cx2)\n Cx1Max=maximum(abs.(Cx1));\n h1 = heatmap(Cx1, clim=(-Cx1Max, Cx1Max), title=\"Cx1\", yflip=true, c=:bluesreds);\n h2 = heatmap(cC.F'*Cx1*cC.F, clim=(0, 1), title=\"F'*Cx1*F\", yflip=true, c=:amp);\n Cx2Max=maximum(abs.(Cx2));\n h3 = heatmap(Cx2, clim=(-Cx2Max, Cx2Max), title=\"Cx2\", yflip=true, c=:bluesreds);\n h4 = heatmap(cC.F'*Cx2*cC.F, clim=(0, 1), title=\"F'*Cx2*F\", yflip=true, c=:amp);\n CMax=maximum(abs.(C));\n h5 = heatmap(C, clim=(-CMax, CMax), title=\"Cx1+Cx2\", yflip=true, c=:bluesreds);\n h6 = heatmap(cC.F'*C*cC.F, clim=(0, 1), title=\"F'*(Cx1+Cx2)*F\", yflip=true, c=:amp);\n üìà=plot(h1, h3, h5, h2, h4, h6, size=(800,400))\n\n(Image: Figure CSP1)\n\n# example when argument `selMeth` is different from `extremal`: enhance snr\n cC=csp(Cx1, Cx2; selMeth=:enhaceSNR)\n Cx1Max=maximum(abs.(Cx1));\n h1 = heatmap(Cx1, clim=(-Cx1Max, Cx1Max), title=\"Cx1\", yflip=true, c=:bluesreds);\n h2 = heatmap(cC.F'*Cx1*cC.F, clim=(0, 1), title=\"F'*Cx1*F\", yflip=true, c=:amp);\n Cx2Max=maximum(abs.(Cx2));\n h3 = heatmap(Cx2, clim=(-Cx2Max, Cx2Max), title=\"Cx2\", yflip=true, c=:bluesreds);\n h4 = heatmap(cC.F'*Cx2*cC.F, clim=(0, 1), title=\"F'*Cx2*F\", yflip=true, c=:amp);\n CMax=maximum(abs.(C));\n h5 = heatmap(C, clim=(-CMax, CMax), title=\"Cx1+Cx2\", yflip=true, c=:bluesreds);\n h6 = heatmap(cC.F'*C*cC.F, clim=(0, 1), title=\"F'*(Cx1+Cx2)*F\", yflip=true, c=:amp);\n üìâ=plot(h1, h3, h5, h2, h4, h6, size=(800,400))\n\n\n(Image: Figure CSP2)\n\n\n\n\n\n","category":"function"},{"location":"ajd/#AJD-1","page":"AJD","title":"AJD","text":"","category":"section"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Approximate Joint Diagonalization (AJD) is a diagonalization prodedure generalizing the eigenvalue-eigenvector decomposition to more then two matrices. This corresponds to the situation m=1 (one dataset) and k2 (number of observations). As such, is a very general procedure with a myriad of potential applications. It was first proposed by Flury and Gautschi (1986) in statistics and by Cardoso and Souloumiac(1996) in signal processing üéì. Since, it has become a fundamental tool for solving the blind source separation(BSS) problem.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Let C_1C_k be a set of nn symmetric or Hermitian matrices. In BSS typically those are covariance matrices, Fourier cross-spectral matrices, lagged covariance matrices or slices of 4th order cumulants, where n is the number of variables.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"An AJD algorithm seeks a matrix F diagonalizing all matrices in the set as much as possible, according to some diagonalization criterion, that is, we want to achieve","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"F^HC_lFŒõ_l, for all l1k. hspace1cm [ajd.1]","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"In some algorithm, such as OJoB, F is constrained to be orthogonal, in others, only to be non-singular.","category":"page"},{"location":"ajd/#pre-whitening-for-AJD-1","page":"AJD","title":"pre-whitening for AJD","text":"","category":"section"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Similarly to the two-step procedures encountered in other filters, e.g., for the CCA, for solving the AJD problem often pre-whitening is applied: first a whitening matrix W if found such that","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"W^HBig(frac1ksum_l=1^kC_kBig)W_k=I, hspace1cm [ajd.2]","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"then the following transformed AJD problem if solved for U:","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"U^H(W^HC_lW)UŒõ_l, for all l1k.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Finally, F is obtained as","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"F=WU. hspace1cm [ajd.3]","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Notice that:","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"matrix W may be taken rectangular so as to engender a dimensionality reduction at this stage. This may improve the convergence behavior of AJD algorithms if the matrices C_1C_k are not well-conditioned.  \nif this two-step procedure is employed, the final solution F is never orthogonal, even if the solving AJD algorithm constrains the solution within the orthogonal group.","category":"page"},{"location":"ajd/#permutation-for-AJD-1","page":"AJD","title":"permutation for AJD","text":"","category":"section"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Approximate joint diagonalizers are arbitrary up to a scale and permutation. Diagonalizations.jl attempts to solve the permutation ambiguity by reordering the columns of F so as to sort in descending order the diagonal elements of","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"frac1ksum_l=1^kF^HC_kF. hspace1cm [ajd.4]","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"This sorting mimics the sorting of exact diagonalization procedures such as the PCA, of which the AJD is a generalization, however it is meaningful only if the input matrices C_1C_k are positive definite.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"In analogy with PCA, let","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Œª=Œª_1Œª_n  hspace1cm [ajd.5]","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"be the diagonal elements of [ajd.4] and let","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"œÉ_TOT=sum_i=1^nŒª_i be the total variance.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"We denote widetildeF=f_1 ldots f_p the matrix holding the first pn column vectors of F, where p is the subspace dimension. The explained variance is given by","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"œÉ_p=fracsum_i=1^pŒª_iœÉ_TOT hspace1cm [ajd.6]","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"and the accumulated regularized eigenvalues (arev) by","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"œÉ_j=sum_i=1^jœÉ_i, for j=1 ldots n. hspace1cm [ajd.7]","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the MCA constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector (see subspace dimension). By default, eVar is set to 0.999.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Solution","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"There is no closed-form solution to the AJD problem in general. Diagonalizations.jl implements the following iterative algorithms:","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Algorithm Constraint Reference\nOJoB F orthogonal Congedo et al (2011, 2012); Congedo (2013)","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Constructors","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"Two constructors are available (see here below). The constructed LinearFilter object holding the AJD will have fields:","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":".F: matrix widetildeF with columns holding the first p eigenvectors in F, or just F if p=n","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":".iF: the left-inverse of .F","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":".D: the leading pp block of Œõ, i.e., the elements [ajd.5] associated to .F in diagonal form.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":".eVar: the explained variance [ajd.6] for the chosen value of p.","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":".ev: the vector Œª [ajd.5].","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":".arev: the accumulated regularized eigenvalues, defined in [ajd.7].","category":"page"},{"location":"ajd/#","page":"AJD","title":"AJD","text":"ajd","category":"page"},{"location":"ajd/#Diagonalizations.ajd","page":"AJD","title":"Diagonalizations.ajd","text":"(1)\nfunction ajd(ùêÇ::‚ÑçVector;\n             trace1    :: Bool   = false,\n             w         :: Union{Tw, Function} = ‚óã,\n          algorithm :: Symbol = :OJoB,\n          preWhite  :: Bool   = false,\n          sort      :: Bool   = true,\n          init      :: Mato   = ‚óã,\n          tol       :: Real   = 0.,\n          maxiter   :: Int    = 1000,\n          verbose   :: Bool   = false,\n        eVar     :: TeVaro    = _minDim(ùêÇ),\n        eVarC    :: TeVaro    = ‚óã,\n        eVarMeth :: Function  = searchsortedfirst,\n        simple   :: Bool      = false)\n\n(2)\nfunction ajd(ùêó::VecMat;\n             covEst     :: StatsBase.CovarianceEstimator = SCM,\n             dims       :: Into = ‚óã,\n             meanX      :: Into = 0,\n          trace1     :: Bool = false,\n          w          :: Union{Tw, Function} = ‚óã,\n       algorithm :: Symbol = :OJoB,\n       preWhite  :: Bool = false,\n       sort      :: Bool = true,\n       init      :: Mato = ‚óã,\n       tol       :: Real = 0.,\n       maxiter   :: Int  = 1000,\n       verbose   :: Bool = false,\n     eVar     :: TeVaro    = _minDim(ùêó),\n     eVarC    :: TeVaro    = ‚óã,\n     eVarMeth :: Function  = searchsortedfirst,\n     simple   :: Bool      = false)\n\n\nReturn a LinearFilter object:\n\n(1) Approximate joint diagonalization of the set of k symmetric or Hermitian matrices ùêÇ, of type ‚ÑçVector using the given solving algorithm (OJoB by default).\n\nIf trace1 is true, all matrices in the set ùêÇ are normalized so as to have trace equal to 1. It is false by default.\n\nif w is a StatsBase.AbstractWeights, the weights are applied to the set ùêÇ. If w is a Function, the weights are found passing each matrix in the set to such function. An appropriate choice for AJD algorithms minimizing a least-squares criterion, like OJoB and NoJoB, is the nonDiagonality function (Congedo et al.(2008)üéì). By default, no weights are applied.\n\nIf preWhite is true the solution is found by the two-step procedure described here above in section pre-whitening for AJD. By default, it is false. Dimensionality reduction can be obtained at this stage using arguments eVarC and eVarMeth, in the same way they are used to find the subspace dimension p, but using the accumulated regularized eigenvalues of\n\nfrac1ksum_l=1^kC_k.\n\nThe default values are:\n\neVarC is set to 0.999\neVarMeth=searchsortedfirst.\n\nIf sort is true (default), the vectors in .F are permuted as explained here above in permutation for AJD, otherwise they will be in arbitrary order.\n\nA matrix can be passed with the init argument in order to initialize the matrix F to be found by the AJD algorithm. If nothing is passed (default), following Congedo et al. (2011)üéì F is initialized with the eigevector matrix of\n\nfrac1ksum_l=1^kC_k^2.\n\ntol is the tolerance for convergence of the solving algorithm. By default it is set to the square root of Base.eps of the nearest real type of the data input. This corresponds to requiring the relative change across two successive iterations of the average squared norm of the column vectors of F to vanish for about half the significant digits. If the solving algorithm encounter difficulties in converging, try setting tol in between 1e-6 and 1e-3.\n\nmaxiter is the maximum number of iterations allowed to the solving algorithm (1000 by default). If this maximum number of iteration is attained, a warning will be printed in the REPL. In this case, try increasing maxiter and/or tol.\n\nIf verbose is true (false by default), the convergence attained at each iteration will be printed in the REPL.\n\neVar and eVarMeth are used to define a subspace dimension p using the accumulated regularized eigenvalues in Eq. [ajd.7].\n\nThe default values are:\n\neVar is set to the dimension of the matrices in ùêÇ\neVarMeth=searchsortedfirst.\n\nNote that passing nothing or a real nummber as eVar (see subspace dimension) is meningful only if sort is set to true (default) and if the input matrices C_1C_k are positive definite.\n\nIf simple is set to true, p is set equal to the dimension of the matrices C_1C_k and only the fields .F and .iF are written in the constructed object. This corresponds to the typical output of AJD algorithms.\n\n(2) Approximate joint diagonalization with a set of k data matrices ùêó as input; the covariance matrices of the set are estimated using arguments covEst, dims and meanX (see covariance matrix estimations) and passed to method (1) with the remaining arguments of method (2).\n\nSee also: PCA, CSP, mAJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\nt, n, k=50, 10, 4\nA=randn(n, n) # mixing matrix in model x=As\nXset = [genDataMatrix(t, n) for i = 1:k]\nXfixed=randn(t, n)./1\nfor i=1:length(Xset) Xset[i]+=Xfixed end\nCset = _crossCov(Xset, 1, k; dims=1)\nCset = ‚ÑçVector([‚Ñç(Cset[l]) for l=1:k])\n# method (1)\naC=ajd(Cset; simple=true)\n# method (2)\naX=ajd(Xset; simple=true)\n@test aX‚âàaC\n\n# create 20 random commuting matrices;\n# they all have the same eigenvectors\nCset2=randP(3, 20; eigvalsSNR=Inf, commuting=true)\n# estimate the approximate joint diagonalizer (ajd)\na=ajd(Cset2)\n# the ajd must be equivalent to the eigenvector matrix\n# of any of the matrices in Cset2\n@test spForm(a.F'*eigvecs(Cset2[1]))+1.0‚âà1.0\n\n# normalize the trace of input matrices,\n# give them weights according to the `nonDiagonality` function,\n# apply pre-whitening and limit the explained variance both\n# at the pre-whitening level and at the level of final vector selection\na=ajd(Cset; trace1=true, w=nonD, preWhite=true, eVarC=10, eVar=0.99)\n\na=ajd(Cset; preWhite=true)\n\nusing Plots\n# plot the original covariance matrices\n# and their transformed counterpart\nCMax=maximum(maximum(abs.(C)) for C ‚àà Cset);\n h1 = heatmap(Cset[1], clim=(-CMax, CMax), title=\"C1\", yflip=true, c=:bluesreds);\n h2 = heatmap(Cset[2], clim=(-CMax, CMax), title=\"C2\", yflip=true, c=:bluesreds);\n h3 = heatmap(Cset[3], clim=(-CMax, CMax), title=\"C3\", yflip=true, c=:bluesreds);\n h4 = heatmap(Cset[4], clim=(-CMax, CMax), title=\"C4\", yflip=true, c=:bluesreds);\n üìà=plot(h1, h2, h3, h4, size=(700,300))\n\nDset=[a.F'*C*a.F for C ‚àà Cset];\n DMax=maximum(maximum(abs.(D)) for D ‚àà Dset);\n h5 = heatmap(Dset[1], clim=(-DMax, DMax), title=\"F'*C1*F\", yflip=true, c=:bluesreds);\n h6 = heatmap(Dset[2], clim=(-DMax, DMax), title=\"F'*C2*F\", yflip=true, c=:bluesreds);\n h7 = heatmap(Dset[3], clim=(-DMax, DMax), title=\"F'*C3*F\", yflip=true, c=:bluesreds);\n h8 = heatmap(Dset[4], clim=(-DMax, DMax), title=\"F'*C4*F\", yflip=true, c=:bluesreds);\n üìâ=plot(h5, h6, h7, h8, size=(700,300))\n\n\n(Image: Figure AJD1)\n\n(Image: Figure AJD2)\n\n\n\n\n\n","category":"function"},{"location":"pca/#PCA-1","page":"PCA","title":"PCA","text":"","category":"section"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Principal Component Analysis (PCA) is obtained by eigenvalue-eigenvector decomposition. It was first conceived by Karl Pearson (1901)üéì as a way to fit straight lines to a multidimensional cloud of points. It corresponds to the situation m=1 (one dataset) and k=1 (one observation).","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Let X be a nt data matrix, where n is the number of variables and t the number of samples and let C be its nn covariance matrix. Being C a positive semi-definite matrix, its eigenvector matrix U diagonalizes C by rotation, as","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"U^HCU=Œõ. hspace1cm [pca.1]","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"The eigenvalues in the diagonal matrix Œõ are all non-negative. They are all real and positive if C is positive definite, which is assumed in the remaining of this exposition. The linear transformation U^HX yields uncorrelated data with variance of the n^th component equal to the corresponding eigenvalue Œª_n, that is,","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"frac1TU^HXX^HU=Œõ. hspace1cm [pca.2]","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"In Diagonalizations.jl the diagonal elements of diagonalized matrices are always arranged by descending order, such as","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Œª_1ldotsŒª_n. hspace1cm [pca.3]","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Then, because of the extremal properties of eigenvalues (Congedo, 2013, p. 66; Schott, 1997, p. 104-128)üéì, the first component (row) of U^HX holds the linear combination of X with maximal variance, the second the linear combination with maximal residual variance and so on, subject to constraint U^HU=UU^H=I.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Let œÉ_TOT=sum_i=1^nŒª_i=tr(C) be the total variance and let widetildeU=u_1 ldots u_p be the matrix holding the first pn eigenvectors, where p is the subspace dimension, then","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"œÉ_p=fracsum_i=1^pŒª_iœÉ_TOT=fractr(widetildeU^HCwidetildeU)tr(C)  hspace1cm [pca.4]","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"is named the explained variance and","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Œµ_p=œÉ_TOT-œÉ_p hspace1cm [pca.5]","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"is named the representation error. These quantities are expressed in proportions, that is, it holds œÉ_p+Œµ_p=1.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"The accumulated regularized eigenvalues (arev) are defined as","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"œÉ_j=sum_i=1^jœÉ_i, for j=1 ldots n, hspace1cm [pca.6]","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"where œÉ_i is given by Eq. [pca.4].","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the PCA constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector (see subspace dimension). By default, eVar is set to 0.999.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Solution","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"The PCA solution is given by the eigenvalue-eigenvector decoposition of C","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"textrmEVD(C)=UŒõU^H.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"It is worth mentioning that","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"widetildeUwidetildeŒõwidetildeU^H,","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"where widetildeŒõ is the leading pp block of Œõ, is the best approximant to C with rank p in the least-squares sense (Good, 1969)üéì.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Constructors","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"Three constructors are available (see here below). The constructed LinearFilter object holding the PCA will have fields:","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":".F: matrix widetildeU with orthonormal columns holding the first p eigenvectors in U, or just U if p=n","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":".iF: the (conjugate) transpose of .F","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":".D: the leading pp block of Œõ, i.e., the eigenvalues associated to .F in diagonal form.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":".eVar: the explained variance [pca.4] for the chosen value of p.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":".ev: the vector diag(Œõ) holding all n eigenvalues.","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":".arev: the accumulated regularized eigenvalues in [pca.6].","category":"page"},{"location":"pca/#","page":"PCA","title":"PCA","text":"pca","category":"page"},{"location":"pca/#Diagonalizations.pca","page":"PCA","title":"Diagonalizations.pca","text":"(1)\nfunction pca(C :: SorH;\n             eVar     :: TeVaro = nothing,\n             eVarMeth :: Function = searchsortedfirst,\n             simple   :: Bool = false)\n\n(2)\nfunction pca(X::Mat;\n             covEst   :: StatsBase.CovarianceEstimator = SCM,\n             dims     :: Into = ‚óã,\n             meanX    :: Tmean = 0,\n             wX       :: Tw = ‚óã,\n          eVar     :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          simple   :: Bool = false)\n\n(3)\nfunction pca(ùêó::VecMat;\n             covEst   :: StatsBase.CovarianceEstimator = SCM,\n             dims     :: Into = ‚óã,\n             meanX    :: Into = 0,\n          eVar     :: TeVaro = ‚óã,\n          eVarMeth :: Function = searchsortedfirst,\n          simple   :: Bool = false,\n       metric   :: Metric = Euclidean,\n       w        :: Vector = [],\n       ‚úìw       :: Bool = true,\n       init     :: SorHo = nothing,\n       tol      :: Real = 0.,\n       verbose  :: Bool = false)\n\nReturn a LinearFilter object:\n\n(1) Principal component analysis with covariance matrix C as input.\n\nC must be flagged as Symmetric or Hermitian, see data input.\n\neVar and evarMeth are keyword optional arguments for defining the subspace dimension p using the .arev vector given by Eq. [pca.6]. The default values are:\n\neVar=0.999\nevarMeth=searchsortedfirst\n\nIf simple is set to true, p is set equal to n and only the fields .F and .iF are written in the constructed object. This option is provided for low-level work when you don't need to define a subspace dimension or you want to define it by your own methods.\n\n(2) Principal component analysis with a data matrix X as input.\n\nX is a real or complex data matrix.\n\nCovEst, dims, meanX, wX are optional keyword arguments to regulate the estimation of the covariance matrix of X. See covariance matrix estimations.\n\nOnce the covariance matrix estimated, method (1) is invoked with optional keyword arguments eVar, eVarMeth and simple.\n\n(3) Principal component analysis with a vector of data matrix ùêó as input.\n\nCovEst, dims and meanX are optional keyword arguments to regulate the estimation of the covariance matrices for all data matrices in ùêó. See covariance matrix estimations.\n\nA mean of these covariance matrices is computed using optional keywords arguments metric, w, ‚úìw, init, tol and verbose. See mean covariance matrix estimations. By default, the arithmetic mean is computed.\n\nOnce the mean covariance matrix estimated, method (1) is invoked with optional keyword arguments eVar, eVarMeth and simple.\n\nSee also: Whitening, CSP, MCA, AJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\n# Method (1)\nn, t=10, 100\nX=genDataMatrix(n, t)\nC=(X*X')/t\npC=pca(Hermitian(C); simple=true)\n# or, shortly\npC=pca(‚Ñç(C); simple=true)\n\n# Method (2)\npX=pca(X; simple=true)\n@test C‚âàpC.F*pC.D*pC.iF\n@test C‚âàpC.F*pC.D*pC.F'\n@test pX‚âàpC\n\n# Method (3)\nk=10\nXset=[genDataMatrix(n, t) for i=1:k]\n\n# pca on the average covariance matrix\np=pca(Xset)\n\n# ... selecting subspace dimension allowing an explained variance = 0.5\np=pca(Xset; eVar=0.5)\n\n# ... averaging the covariance matrices using the logEuclidean metric\np=pca(Xset; metric=logEuclidean, eVar=0.5)\n\n# ... giving weights `w` to the covariance matrices\np=pca(Xset; metric=logEuclidean, w=abs2.(randn(k)), eVar=0.5)\n\n# ... subtracting the mean\np=pca(Xset; meanX=nothing, metric=logEuclidean, w=abs2.(randn(k)), eVar=0.5)\n\n# pca on the average of the covariance matrices computed along dims 1\np=pca(Xset; dims=1)\n\n# explained variance\np.eVar\n\n# name of the filter\np.name\n\nusing Plots\n# plot regularized accumulated eigenvalues\nplot(p.arev)\n\n# plot the original covariance matrix and the rotated covariance matrix\n Cmax=maximum(abs.(C));\n h1 = heatmap(C, clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"C\");\n D=pC.F'*C*pC.F;\n Dmax=maximum(abs.(D));\n h2 = heatmap(D, clim=(0, Dmax), yflip=true, c=:amp, title=\"F'*C*F\");\n üìà=plot(h1, h2, size=(700, 300))\n\n\n(Image: Figure PCA)\n\n\n\n\n\n","category":"function"},{"location":"whitening/#Whitening-1","page":"Whitening","title":"Whitening","text":"","category":"section"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"Whitening (also named Sphering) is a standardized version of PCA. Possibly it is the most used diagonalization procedure among all. Like PCA, it corresponds to the situation m=1 (one dataset) and k=1 (one observation).","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"Let X be a nt data matrix, where n is the number of variables and t the number of samples and let C be its nn covariance matrix. Being C a positive semi-definite matrix, its eigenvector matrix U diagonalizes C by rotation, as","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"U^HCU=Œõ. hspace1cm [whitening.1]","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"The eigenvalues in the diagonal matrix Œõ are all non-negative. They are all real and positive if C is positive definite, which is assumed in the remaining of this exposition. The linear transformation Œõ^-12U^HX yields uncorrelated data with unit variance at all n components, that is,","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"frac1TŒõ^-12U^HXX^HUŒõ^-12=I. hspace1cm [whitening.2]","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"Whitened data remains whitened after whatever further rotation. That is, for any orthogonal matrix V, it holds","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"V^Hbig(frac1TŒõ^-12U^HXX^HUŒõ^-12big)V=I. hspace1cm [whitening.3]","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"Hence there exist an infinite number of possible whitening matrices with general form V^HŒõ^-12U^H. Because of this property whitening plays a fundamental role as a first step in many two-steps diagonalization procedures (e.g., for the CSP, CSTP and CCA). Particularly important among the infinite family of whitening matrices is the only symmetric one (or Hermitian, if complex), which is the inverse of the principal square root of C and is found repeatedly in computations on the manifold of positive definite matrices (see for example intro to Riemannian geometry).","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the Whitening constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector, which is defined as for the PCA filter, see Eq. [pca.6] therein and subspace dimension for details. By default, eVar is set to 0.999.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"Solution","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"As for PCA, the solution is given by the eigenvalue-eigenvector decoposition of C","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"textrmEVD(C)=UŒõU^H.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"Constructors","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"Three constructors are available (see here below), which use exactly the same syntax as for PCA. The constructed LinearFilter object holding the Whitening will have fields:","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":".F: matrix widetildeUwidetildeŒõ^-12 with scaled orthonormal columns, where widetildeŒõ is the leading pp block of Œõ and  widetildeU=u_1 ldots u_p holds the first p eigenvectors in U. If p=n, .F is just UŒõ^-12.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":".iF: widetildeŒõ^12widetildeU^H, the left-inverse of .F.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":".D: widetildeŒõ, i.e., the eigenvalues associated to .F in diagonal form.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":".eVar: the explained variance for the chosen value of p. This is the same as for the PCA, see Eq. [pca.4] therein.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":".ev: the vector diag(Œõ) holding all n eigenvalues.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":".arev: the accumulated regularized eigenvalues. This is the same as for the PCA, see Eq. [pca.6] therein.","category":"page"},{"location":"whitening/#","page":"Whitening","title":"Whitening","text":"whitening","category":"page"},{"location":"whitening/#Diagonalizations.whitening","page":"Whitening","title":"Diagonalizations.whitening","text":"(1)\nfunction whitening(C :: SorH;\n                   eVar     :: TeVaro=‚óã,\n                   eVarMeth :: Function=searchsortedfirst,\n                   simple   :: Bool=false)\n\n(2)\nfunction whitening(X::Mat;\n                   covEst   :: StatsBase.CovarianceEstimator = SCM,\n                   dims     :: Into = ‚óã,\n                   meanX    :: Tmean = 0,\n                   wX       :: Tw = ‚óã,\n                eVar     :: TeVaro = ‚óã,\n                eVarMeth :: Function = searchsortedfirst,\n                simple   :: Bool = false)\n\n(3)\nfunction whitening(ùêó::VecMat;\n                   covEst   :: StatsBase.CovarianceEstimator = SCM,\n                   dims     :: Into = ‚óã,\n                   meanX    :: Into = 0,\n                eVar     :: TeVaro = ‚óã,\n                eVarMeth :: Function = searchsortedfirst,\n                simple   :: Bool = false,\n             metric   :: Metric = Euclidean,\n             w        :: Vector = [],\n             ‚úìw       :: Bool = true,\n             init     :: SorHo = nothing,\n             tol      :: Real = 0.,\n             verbose  :: Bool = false)\n\n\nReturn a LinearFilter object:\n\n(1) Whitening with covariance matrix C as input.\n\nC must be flagged as Symmetric or Hermitian, see data input.\n\neVar and evarMeth are keyword optional arguments for defining the subspace dimension p using the .arev vector given by Eq. [pca.6], see PCA. The default values are:\n\neVar=0.999\nevarMeth=searchsortedfirst\n\nIf simple is set to true, p is set equal to n and only the fields .F and .iF are written in the constructed object. This option is provided for low-level work when you don't need to define a subspace dimension or you want to define it by your own methods.\n\n(2) Whitening with a data matrix X as input.\n\nX is a real or complex data matrix.\n\nCovEst, dims, meanX, wX are optional keyword arguments to regulate the estimation of the covariance matrix of X. See covariance matrix estimations.\n\nOnce the covariance matrix estimated, method (1) is invoked with optional keyword arguments eVar, eVarMeth and simple.\n\n(3) Whitening with a vector of data matrix ùêó as input.\n\nCovEst, dims and meanX are optional keyword arguments to regulate the estimation of the covariance matrices for all data matrices in ùêó. See covariance matrix estimations.\n\nA mean of these covariance matrices is computed using optional keywords arguments metric, w, ‚úìw, init, tol and verbose. See mean covariance matrix estimations. By default, the arithmetic mean is computed.\n\nOnce the mean covariance matrix estimated, method (1) is invoked with optional keyword arguments eVar, eVarMeth and simple.\n\nSee also: PCA, CCA.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\n# Method (1)\nn, t=10, 100\nX=genDataMatrix(n, t)\nC=(X*X')/t\nwC=whitening(Hermitian(C); simple=true)\n# or, shortly\nwC=whitening(‚Ñç(C); simple=true)\n\n# Method (2)\npX=whitening(X; simple=true)\n@test wC.F'*C*wC.F‚âàI\n\n# Method (3)\nk=10\nXset=[genDataMatrix(n, t) for i=1:k]\n\n# whitening on the average covariance matrix\nw=whitening(Xset)\n\n# ... selecting subspace dimension allowing an explained variance = 0.5\nw=whitening(Xset; eVar=0.5)\n\n# ... averaging the covariance matrices using the logEuclidean metric\nw=whitening(Xset; metric=logEuclidean, eVar=0.5)\n\n# ... giving weights `w` to the covariance matrices\nw=whitening(Xset; metric=logEuclidean, w=abs2.(randn(k)), eVar=0.5)\n\n# ... subtracting the mean\nw=whitening(Xset; meanX=nothing, metric=logEuclidean, w=abs2.(randn(k)), eVar=0.5)\n\n# whitening on the average of the covariance matrices computed along dims 1\nw=whitening(Xset; dims=1)\n\n# explained variance\nw.eVar\n\n# name of the filter\nw.name\n\nusing Plots\n# plot regularized accumulated eigenvalues\nplot(w.arev)\n\n# plot the original covariance matrix and the whitened covariance matrix\n Cmax=maximum(abs.(C));\n h1 = heatmap(C, clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"C\");\n D=wC.F'*C*wC.F;\n h2 = heatmap(D, clim=(0, 1), yflip=true, c=:amp, title=\"F'*C*F\");\n üìà=plot(h1, h2, size=(700, 300))\n\n(Image: Figure Whitening)\n\n\n\n\n\n","category":"function"},{"location":"gcca/#gCCA-1","page":"gCCA","title":"gCCA","text":"","category":"section"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Generalized Canonical Correlation Analysis (gCCA) is a mutiple approximate joint diagonalization prodedure generalizing the canonical correlation analysis (CCA) to the situation m2 (number of datasets), as for CCA with k=1 (one observation). As the CCA is an MCA carried out on whitened data, so the gCCA is a gMCA carried out on whitened data.","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Let X_1X_m be a set of m data matrices of dimension nt, where n is the number of variables and t the number of samples, both common to all datasets. From these data matrices let us estimate","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"C_ij=frac1TX_iX_j^H, for all ij1m, hspace1cm [gcca.1]","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"i.e., all covariance (i=j) and cross-covariance (ij) matrices.","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"The gMCA seeks m matrices F_1F_m diagonalizing as much as possible all products","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"F_i^H C_ij F_j, for all ij1m. hspace1cm [gcca.2]","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"under costraint","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"F_i^H C_ii F_i=I, for all i1m. hspace1cm [gcca.3]","category":"page"},{"location":"gcca/#permutation-for-gCCA-1","page":"gCCA","title":"permutation for gCCA","text":"","category":"section"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Given constraint [gcca.3], the scaling of approximate diagonalizers F_1F_m are fixed, however there is still a sign and permutation ambiguity (see scale and permutation). Diagonalizations.jl attempts to solve them by finding signed permutation matrices for F_1F_m so as to make all diagonal elements of [gcca.2] positive and sorted in descending order.","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Let","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Œª=Œª_1Œª_n  hspace1cm [gcca.4]","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"be the diagonal elements of","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"frac1m^2-msum_ij=1^m(F_i^H C_ij F_j) hspace1cm [gcca.5]","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"and œÉ_TOT=sum_i=1^nŒª_i be the total correlation.","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"We denote widetildeF_i=f_i1 ldots f_ip the matrix holding the first pn column vectors of F_i, where p is the subspace dimension. The explained variance is given by","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"œÉ_p=fracsum_i=1^pŒª_iœÉ_TOT hspace1cm [gcca.6]","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"and the accumulated regularized eigenvalues (arev) by","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"œÉ_j=sum_i=1^jœÉ_i, for j=1 ldots n, hspace1cm [gcca.7]","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"where œÉ_i is given by Eq. [gcca.6].","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the gCCA constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector (see subspace dimension). By default, eVar is set to 0.999.","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Solution","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"There is no closed-form solution to the gCCA problem in general. Diagonalizations.jl implements the following iterative algorithms:","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Algorithm Constraint Reference\nOJoB F orthogonal Congedo et al (2011, 2012); Congedo (2013)","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"Constructors","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"One constructor is available (see here below). The constructed LinearFilter object holding the gCCA will have fields:","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":".F: vector of matrices widetildeF_1widetildeF_m with columns holding the first p eigenvectors in F_1F_m, or just F_1F_m if p=n","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":".iF: the vector of the left-inverses of the matrices in .F","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":".D: the leading pp block of Œõ, i.e., the elements [gcca.4] associated to the matrices in .F in diagonal form.","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":".eVar: the explained variance [gcca.6] for the chosen value of p.","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":".ev: the vector Œª [gcca.4].","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":".arev: the accumulated regularized eigenvalues, defined by [gcca.7]","category":"page"},{"location":"gcca/#","page":"gCCA","title":"gCCA","text":"gcca","category":"page"},{"location":"gcca/#Diagonalizations.gcca","page":"gCCA","title":"Diagonalizations.gcca","text":"function gcca(ùêó::VecMat;\n              covEst     :: StatsBase.CovarianceEstimator = SCM,\n              dims       :: Into    = ‚óã,\n              meanX      :: Into    = 0,\n          algorithm :: Symbol    = :OJoB,\n          sort      :: Bool      = true,\n          init      :: VecMato   = ‚óã,\n          tol       :: Real      = 0.,\n          maxiter   :: Int       = 1000,\n          verbose   :: Bool      = false,\n        eVar     :: TeVaro   = _minDim(ùêó),\n        eVarMeth :: Function = searchsortedfirst,\n        simple   :: Bool     = false)\n\n\nReturn a LinearFilter object.\n\nGeneralized Canonical Correlation Analysis of the set of m data matrices ùêó using the given solving algorithm (OJoB by default).\n\nIf sort is true (default), the column vectors of the matrices F_1F_m are signed and permuted as explained here above in permutation for gCCA, otherwise they will have arbitrary sign and will be in arbitrary order.\n\nA vector of matrices can be passed with the init argument in order to initialize the matrices F_1F_m to be found by the gCCA algorithm. This matrices should be orthogonal/unitary. If nothing is passed (default), matrices F_i is initialized, following Congedo et al. (2011)üéì, with the eigevector matrix of\n\nfrac1msum_j=1^m C_ijC_ij^H.\n\ntol is the tolerance for convergence of the solving algorithm. By default it is set to the square root of Base.eps of the nearest real type of the data input. This corresponds to requiring the relative change across two successive iterations of the average squared norm of the column vectors of F to vanish for about half the significant digits. If the solving algorithm encounter difficulties in converging, try setting tol in between 1e-6 and 1e-3.\n\nmaxiter is the maximum number of iterations allowed to the solving algorithm (1000 by default). If this maximum number of iteration is attained, a warning will be printed in the REPL. In this case, try increasing maxiter and/or tol.\n\nIf verbose is true (false by default), the convergence attained at each iteration will be printed in the REPL.\n\neVar and eVarMeth are used to define a subspace dimension p using the accumulated regularized eigenvalues in Eq. [gcca.7]\n\nThe default values are:\n\neVar is set to the minimum dimension of the matrices in ùêó\neVarMeth=searchsortedfirst\n\nIf simple is set to true, p is set equal to the dimension of the covariance matrices that are computed on the matrices in ùêó, which depends on the choice of dims, and only the fields .F and .iF are written in the constructed object. This corresponds to the typical output of approximate diagonalization algorithms.\n\nSee also: MCA, gCCA, mAJD.\n\nExamples:\n\nusing Diagonalizations, LinearAlgebra, PosDefManifold, Test\n\n\n####  Create data for testing the case k=1, m>1\n# `t` is the number of samples,\n# `m` is the number of datasets,\n# `n` is the number of variables,\n# `noise` must be smaller than 1.0. The smaller the noise,\n#  the more data are correlated.\nfunction getData(t, m, n, noise)\n    # create m identical data matrices and rotate them by different\n    # random orthogonal matrices V_1,...,V_m\n    ùêï=[randU(n) for i=1:m] # random orthogonal matrices\n    X=randn(n, t)  # data common to all subjects\n    # each subject has this common part plus a random part\n    ùêó=[ùêï[i]'*((1-noise)*X + noise*randn(n, t)) for i=1:m]\n    return ùêó\nend\n\nt, m, n, noise = 20, 2, 6, 0.1\nXset=getData(t, m, n, noise)\nCx=(Xset[1]*Xset[1]')/t\nCy=(Xset[2]*Xset[2]')/t\nCxy=(Xset[1]*Xset[2]')/t\n\n# check that for the case m=2 GCCA gives the same result as CCA\ngc=gcca(Xset; simple=true)\n\nc=cca(Hermitian(Cx), Hermitian(Cy), Cxy; simple=true)\n\n@test (c.F[1]'*Cxy*c.F[2]) ‚âà (gc.F[1]'*Cxy*gc.F[2])\n@test gc.F[1]'*Cx*gc.F[1]‚âàI\n@test gc.F[2]'*Cy*gc.F[2]‚âàI\nD=gc.F[1]'*Cxy*gc.F[2]\n@test norm(D-Diagonal(D))+1‚âà1.\n\ncase m>2\n\nt, m, n, noise = 20, 4, 6, 0.1\nXset=getData(t, m, n, noise)\n\n# ... selecting subspace dimension allowing an explained variance = 0.9\ngc=gcca(Xset, eVar=0.9)\n\n# name of the filter\ngc.name\n\nùíû=Array{Matrix}(undef, 1, m, m)\nfor i=1:m, j=1:m ùíû[1, i, j]=(Xset[i]*Xset[j]')/t end\n\nusing Plots\n# plot regularized accumulated eigenvalues\nplot(gc.arev)\n\n# plot the original cross-covariance matrices and the rotated\n# cross-covariance matrices\n\n# Get all products ùêî[i]' * ùíû[l, i, j] * ùêî[j]\nfunction _rotate_crossCov(ùêî, ùíû, m, k)\n    ùíÆ=Array{Matrix}(undef, k, m, m)\n    @inbounds for l=1:k, i=1:m, j=1:m ùíÆ[l, i, j]=ùêî[i]'*ùíû[l, i, j]*ùêî[j] end\n    return ùíÆ\nend\n\n# Put all cross-covariances in a single matrix of dimension m*n x m*n for visualization\nfunction ùíû2Mat(ùíû::AbstractArray, m, k)\n    n=size(ùíû[1, 1, 1], 1)\n    C=Matrix{Float64}(undef, m*n, m*n)\n    for i=1:m, j=1:m, x=1:n, y=1:n C[i*n-n+x, j*n-n+y]=ùíû[k, i, j][x, y] end\n    return C\nend\n\n C=ùíû2Mat(ùíû, m, 1)\n Cmax=maximum(abs.(C));\n h1 = heatmap(C, clim=(-Cmax, Cmax), yflip=true, c=:bluesreds, title=\"all cross-covariances\")\n ùíÆ=_rotate_crossCov(gc.F, ùíû, m, 1)\n S=ùíû2Mat(ùíÆ, m, 1)\n h2 = heatmap(S, clim=(0, 1), yflip=true, c=:amp, title=\"all rotated cross-covariances\")\n üìà=plot(h1, h2, size=(700,300))\n\n(Image: Figure gCCA)\n\nIn the figure here above, the rotated cross-covariance matrices have the expected   strip-diagonal form, that is, each block F_i^Tfrac1T(X_iX_j^T)F_j,   for ij1m, is approximately diagonal. Each block is 66 because   setting eVar=0.9 has not reduced the original dimension.   The solution is similar to the gMCA, but here the diagonal   of the rotated block matrix is the identity.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Tools-1","page":"Tools","title":"Tools","text":"","category":"section"},{"location":"tools/#","page":"Tools","title":"Tools","text":"Unit tools.jl contains miscellaneous functions and internal functions.","category":"page"},{"location":"tools/#","page":"Tools","title":"Tools","text":"eig\nnonDiagonality\nspForm\ngenDataMatrix","category":"page"},{"location":"tools/#Diagonalizations.eig","page":"Tools","title":"Diagonalizations.eig","text":"function eig(A)\n\nfunction eig(A, B)\n\nCall Julia function eigen and return its output sorted by descending order of eigenvalues.\n\n\n\n\n\n","category":"function"},{"location":"tools/#Diagonalizations.nonDiagonality","page":"Tools","title":"Diagonalizations.nonDiagonality","text":"function nonDiagonality(C::Union{Matrix, Diagonal, SorH})\n\nMeasure of deviancy from diagonality of nn square matrix C, defined as (Congedo et al., 2008)üéì.\n\nfracsum_ijc_ij^2(n-1)sum_ic_ii^2\n\nIt is equal to 0 if C is diagonal, equal to 1 if C is perfectly uniform.\n\nExamples:\n\nusing Diagonalizations\nC=ones(10, 10)                   # uniform matrix\nnd=nonDiagonality(C)             # must be 1\nD=Diagonal(abs.(randn(10, 10)))  # diagonal matrix\nnd=nonDiagonality(D)             # must be 0\n\n\n\n\n\n","category":"function"},{"location":"tools/#Diagonalizations.spForm","page":"Tools","title":"Diagonalizations.spForm","text":"function spForm(P::Union{Mat, Real, Complex})\n\nMeasure of deviancy from scaled permutation form of nn square matrix P, defined as\n\nfrac12(n-1)bigg(sum_row1-beta(row)+sum_col1-beta(col)bigg),\n\nwhere for each row and column of P, Œ≤ is the maximum of the absolute values divided by the sum of the absolute values.\n\nThis index is equal to 0 if in each row and column P has only one non-zero element, that is, if P is a scaled permutation matrix. The larger the index, the farther away P is from this form.\n\nThis measure and several existing variants are well-known in the blind source separation / independent component analysis community, where it is used to compare approximate joint diagonalization algorithms on simulated data. In fact, if A is the inverse of the approximate joint diagonalizer that is used to generate the data and B the approximate joint diagonalizer estimated by an algorithm, P=BA must be as close as possible to a scaled permutation matrix (see scale and permutation).\n\nReturn 0.0 (zero) if P is a real of complex number.\n\nExamples:\n\nusing Diagonalizations, PosDefManifold\n# create 20 random commuting matrices\n# they all have the same eigenvectors\nCset=randP(3, 20; eigvalsSNR=Inf, commuting=true)\n# estimate the approximate joint diagonalizer (ajd)\na=ajd(Cset)\n# the ajd must be equivalent to the eigenvector matrix of\n# any of the matrices in Cset\nspForm(a.F'*eigvecs(Cset[1]))+1.0‚âà1.0 ? println(\" ‚≠ê \") : println(\" ‚õî \")\n\n\n\n\n\n","category":"function"},{"location":"tools/#Diagonalizations.genDataMatrix","page":"Tools","title":"Diagonalizations.genDataMatrix","text":"function genDataMatrix(t::Int, n::Int, A=nothing)\n\nGenerate a tn random data matrix as XA, where X is a tn matrix with entries randomly drawn from a Gaussian distribution and A a nn symmetric matrix, which, if not provided as argument A, will be generated with entries randomly drawn from a uniform distribution ‚àà[-1, 1].\n\n\n\n\n\n","category":"function"},{"location":"cstp/#CSTP-1","page":"CSTP","title":"CSTP","text":"","category":"section"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"In the CSP one assumes that the multiplicity of data have a common structure along one dimension of the input data matrices. For example, in electroencephalography (EEG) a data matrix X, which is comprised of n variables corresponding to the spatial locations for the electrodes on the scalp and t temporal samples, this is the spatial dimension. The assumption holds because the same brain source engenders a fixed spatial pattern on the scalp, whereas, in general, the temporal pattern is arbitrary.","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"The common spatio-temporal pattern (CSTP) extends the CSP to situations when the multiplicity of data have a common structure along both dimensions. In EEG, for example, this is the case of event-related potentials (ERPs). The assumption holds because, again, the same brain source engenders a fixed spatial pattern on the scalp and furthermore ERPs have a quasi-fixed temporal pattern. As the CSP, the CSTP corresponds to the situation m=1 (one dataset) and k=2 (two observation).","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"Given a set of k data matrices X_1 ldots X_k of dimension nt, with mean barX=frac1ksum_i=1^kX_i, the goal of the CSTP is to find two matrices B_(1) and B_(2) verifying","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"left  beginarrayrlB_(1)^TC_(2)B_(1)=IB_(2)^TC_(1)B_(2)=IB_(1)^TbarXB_(2)=Œõ endarray right, hspace1cm [cstp.1],","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"where","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"left  beginarrayrlC_(1)=sum_i=1^kfrac1t(X_i^TX_i)C_(2)=sum_i=1^kfrac1n(X_iX_i^T) endarray right, hspace1cm [cstp.2]","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"are the mean covariance matrices along the first and second dimension of the X_i matrices and Œõ is a diagonal matrix.","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"In words, the CSTP maximizes the ratio of the variance of the transformed barX over the transformed mean covariance matrices C_(1) and C_(2). The CSTP can threfore be used to enhance the signal-to-noise ratio of data matrices mean estimation. For doing so, we retain the filters widetildeB_(1)=b_(1)1 ldots b_(1)p and widetildeB_(2)=b_(2)1 ldots b_(2)p holding the first p vectors of B_(1) and B_(2) corresponding to the highest values of the variance ratio Œõ.","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"For the CSTP we define the total variance ratio as","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"Œª_TOT=sum_i=1^nŒª_i,","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"where the Œª_i are the diagonal elements of Œõ [cstp.1] and we define the explained variance for dimension p such as","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"œÉ_p=fracsum_i=1^pŒª_iŒª_TOT. hspace1cm [cstp.3]","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"The .arev field of the CSTP filter is defined as the vector of accumulated variance ratios","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"œÉ_1ldotsœÉ_n, hspace1cm [cstp.4]","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"where œÉ_j is defined in [cstp.3].","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"For setting the subspace dimension p manually, set the eVar optional keyword argument of the CSTP constructors either to an integer or to a real number, this latter establishing p in conjunction with argument eVarMeth using the arev vector (see subspace dimension). By default, eVar is set to 0.999.","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"Solution","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"The CSTP solutions B_(1) and B_(2) can be found by a two-step procedure (Congedo et al., 2016)üéì:","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"get two whitening matrices hspace01cmW_(1)hspace01cm and hspace01cmW_(2)hspace01cm such that left  beginarrayrlW_(1)^TC_(1)W_(1)=IW_(2)^TC_(2)W_(2)=I endarray right\ndo hspace01cmtextrmSVD(W_(2)^TbarXW_(1))=UŒõV^T","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"The solutions are hspace01cmB_(1)=W_(2)Uhspace01cm and hspace01cmB_(2)=W_(1)V.","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"Constructors","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"Two constructors are available (see here below). The constructed LinearFilter object holding the CSTP will have fields:","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".F[1]: matrix widetildeB_(1)=b_(1)1 ldots b_(1)p. This is the whole matrix B_(1) if p=n.","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".F[2]: matrix widetildeB_(2)=b_(2)1 ldots b_(2)p. This is the whole matrix B_(2) if p=n","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".iF[1]: the left-inverse of .F[1]","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".iF[2]: the left-inverse of .F[2]","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".D: the leading pp block of Œõ in [cstp.1].","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".eVar: the explained variance for the chosen value of p, given by the p^th value of [cstp.4].","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".ev: the vector diag(Œõ) holding all n diagonal elements of matrix Œõ in [cstp.1].","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":".arev: the accumulated regularized eigenvalues, defined in [cstp.4].","category":"page"},{"location":"cstp/#","page":"CSTP","title":"CSTP","text":"cstp","category":"page"},{"location":"cstp/#Diagonalizations.cstp","page":"CSTP","title":"Diagonalizations.cstp","text":"(1)\nfunction cstp( X :: Mat, C‚Çç‚ÇÅ‚Çé :: SorH, C‚Çç‚ÇÇ‚Çé :: SorH;\n               eVar     :: TeVaro = ‚óã,\n               eVarC    :: TeVaro = ‚óã,\n               eVarMeth :: Function = searchsortedfirst,\n               simple   :: Bool = false)\n\n(2)\nfunction cstp( ùêó::VecMat;\n               covEst   :: StatsBase.CovarianceEstimator = SCM,\n               meanX    :: Into = 0,\n            eVar     :: TeVaro = ‚óã,\n            eVarC    :: TeVaro = ‚óã,\n            eVarMeth :: Function = searchsortedfirst,\n            simple   :: Bool = false,\n         metric   :: Metric = Euclidean,\n         w        :: Vector = [],\n         ‚úìw       :: Bool = true,\n         init1    :: SorHo = nothing,\n         init2    :: SorHo = nothing,\n         tol      :: Real = 0.,\n         verbose  :: Bool = false)\n\nReturn a LinearFilter object:\n\n(1) Common spatio-temporal pattern with nm mean data matrix X, mm covariance matrices C‚Çç‚ÇÅ‚Çé and nn covariance matrix C‚Çç‚ÇÇ‚Çé as input.\n\neVar, eVarC and eVarMeth are keyword optional arguments for defining the subspace dimension p. Particularly:\n\neVarC is used for defining the subspace dimension of  the whitening step. The default is 0.999.\neVar is the keyword optional argument for defining the  subspace dimension p using the .arev vector  given by [cstp.5]. The default is given in [cstp.6] here above.\neVarMeth applies to both eVarC and eVar. The default value is  evarMeth=searchsortedfirst.\n\nIf simple is set to true, p is set equal to n and only the fields .F and .iF are written in the constructed object. This option is provided for low-level work when you don't need to define a subspace dimension or you want to define it by your own methods.\n\n(2) Common spatio-temporal pattern with a set of k data matrices ùêó as input.\n\nThe k matrices in ùêó are real or complex data matrices. They must all have the same size.\n\ncovEst and meanX are optional keyword arguments to regulate the estimation of the covariance matrices of the data matrices in ùêó, to be used to compute the mean covariance matrices in [cstp.2] here above. See covariance matrix estimations.\n\nThe mean covariance matrices C_(1) and C_(1) in [cstp.2] are computed using optional keywords arguments metric, w, ‚úìw, init1, init2, tol and verbose, which allow to compute non-Euclidean means. Particularly (see mean covariance matrix estimations),\n\ninit1 is the initialization for C_(1),\ninit2 is the initialization for C_(2).\n\nBy default, the arithmetic means [cstp.2] are computed.\n\nOnce the two covariance matrices C_(1) and C_(2) estimated, method (1) is invoked with optional keyword arguments eVar, eVarC, eVarMeth and simple. See method (1) for details.\n\n\n\n\n\n","category":"function"},{"location":"#Documentation-1","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"#Requirements-and-Installation-1","page":"Documentation","title":"Requirements & Installation","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Julia: version ‚â• 1.2","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Packages: see the dependencies of the main module.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"To install the package execute the following command in Julia's REPL:","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"]add CovarianceEstimation PosDefManifold Diagonalizations","category":"page"},{"location":"#Quick-Start-1","page":"Documentation","title":"Quick Start","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Copy and execute the examples .jl units provided in the examples folder.","category":"page"},{"location":"#Reviewers-1","page":"Documentation","title":"Reviewers","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Independent reviewers for both the code and the documentation are welcome. The package is throughoutly tested for the case of real data input, not tested at all for the case of complex data input.","category":"page"},{"location":"#TroubleShoothing-1","page":"Documentation","title":"TroubleShoothing","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Problem Solution\nNo problem has been reported so far ","category":"page"},{"location":"#About-the-Authors-1","page":"Documentation","title":"About the Authors","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Marco Congedo, corresponding author, is a research scientist of CNRS (Centre National de la Recherche Scientifique), working at UGA (University of Grenoble Alpes). Contact: first name dot last name at gmail dot com","category":"page"},{"location":"#Overview-1","page":"Documentation","title":"Overview","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Diagonalizations.jl implements the following multivariate linear filters:","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Table 1","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Acronym Full Name Datasets ( m ) Observations ( k )\nPCA Principal Component Analysis 1 1\nWhitening Whitening (Sphering) 1 1\nMCA Maximum Covariance Analysis 2 1\nCCA Canonical Correlation Analysis 2 1\ngMCA generalized MCA >1 1\ngCCA generalized CCA >1 1\nCSP Common Spatial Pattern 1 2\nCSTP Common Spatio-Temporal Pattern 1 >1\nAJD Approximate Joint Diagonalization 1 >1\nmAJD multiple AJD >1 >1","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"All these filters are obtained by diagonalization procedures and can be all understood as particular solutions to the same optimization problem, which corresponds to the mAJD problem. (Congedo, 2013 üéì). They can be classified in several way. For instance,","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"the MCA can be seen as a bilinear version and the gMCA as a multi-linear version of the PCA.\nthe CCA can be seen as a bilinear version and the gMCA as a multi-linear version of Whitening.\nthe AJD can be seen as a generalization of the PCA and of the CSP.\nthe mAJD can be seen as a generalization of all other filters.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Also,","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"PCA and Whitening are based on the eigenvalues decomposition\nMCA and PCA are based on the singular values decomposition\nCSP and CSTP are based on the generalized eigenvalue decomposition.\ngMCA, gCCA, AJD and mAJD are solved by iterative algorithms generalizing the above well-known procedures.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"With respect to the number of datasets ( m ) and observations ( k )   the implemented filters fill the entries of the following table:","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"(Image: Figure 1)","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Figure 1 Taxonomy of several diagonalization procedures and   signal procssing methods that make use of them, depending on the number of observations and data sets involved. Legend: see acronyms.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Future versions shall concentrate on implementing other iterative algorithms for solving the generalized problems. Also, this package will be used as the base of packages implementing practical signal processing methods such as blind source separation.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"As compared to MultivariateStats.jl this package supports :","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"the dims keyword\nshrinkage covariance matrix estimations throught package CovarianceEstimation\naverage covariance estimations with metrics for the manifold of positive definite matrices using the PosDefManifold package\nautomatic procedures to set the subspace dimension\ndiagonalization procedures for the case m2 and k2 (see Fig. 1).","category":"page"},{"location":"#Code-units-1","page":"Documentation","title":"Code units","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Diagonalizations.jl includes seven code units (.jl files):","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Unit Description\nDiagonalizations.jl Main module, declaring constants, types and structs\npca.jl Unit implementing the PCA and the Whitening\ncca.jl Unit implementing the MCA and the CCA\ngcca.jl Unit implementing the gMCA and the gCCA\ncsp.jl Unit implementing the CSP and CSTP\najd.jl Unit implementing the AJD and the mAJD\ntools.jl Unit containing general tools and internal functions\nJoB.jl Unit implementing the OJoB and (later on) NOJoB iterative algorithms (in the 'optim' folder)","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"Furthermore, all examples given at the end of the documentation of the filter constructors are collected as .jl units in the 'examples' folder.","category":"page"},{"location":"#-1","page":"Documentation","title":"üéì","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"References","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"A. Belouchrani, K. Abed-Meraim, J. Cardoso, E. Moulines (1997), A blind source separation technique using second order statistics, IEEE Transactions on Signal Processing, 45(2), 434‚Äì444.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"J.-F. Cardoso (1989) Source separation using higher order moments. In Proc. IEEE ICASSP, 4, 2109-2112","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"J.-F. Cardoso and A. Souloumiac (1993) Blind beamforming for non gaussian signals. In IEE Proceedings-F, 140, 362‚Äì370.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"J.-F. Cardoso, A. Souloumiac (1996) Jacobi angles for simultaneous diagonalization. SIAM Journal on Matrix Analysis and Applications, 17(1), 161‚Äì164.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"M. Congedo (2013) EEG Source Analysis Thesis submitted in partial fulfillment of the requirements to obtain the H.D.R degree presented at doctoral school EDISCE, University of Grenoble Alpes, France.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"M. Congedo M, A. Barachant A, R. Bhatia (2017) Riemannian Geometry for EEG-based Brain-Computer Interfaces; a Primer and a Review, Brain-Computer Interfaces, 4(3), 155-174.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"M. Congedo, C. Gouy-Pailler, C. Jutten (2008) On the blind source separation of human electroencephalogram by approximate joint diagonalization of second order statistics. Clinical Neurophysiology 119, 2677-2686.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"M. Congedo, L. Korczowski, A. Delorme, F. Lopes Da Silva (2016) Spatio-Temporal Common Pattern; a Companion Method for ERP Analysis in the Time Domain, Journal of Neuroscience Methods, 267, 74-88.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"M. Congedo, R. Phlypo, J. Chatel-Goldman (2012) Orthogonal and Non-Orthogonal Joint Blind Source Separation in the Least-Squares Sense, 20th European Signal Processing Conference (EUSIPCO), 1885-9.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"M. Congedo, R. Phlypo, D.-T. Pham (2011) Approximate joint singular value decomposition of an asymmetric rectangular matrix set, IEEE Trans Signal Process, 59(1), 415-424.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"B.N. Flury, W. Gautschi (1986) An algorithm for the simultaneous orthogonal transformation of several positive de\ffinite symmetric matrices to nearly orthogonal form. Siam J. of Sci. Stat. Comp., 7(1), 169-184.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"K. Fukunaga (1990) Introduction to Statistical Pattern Recognition (2nd Ed.), Academic Press, London.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"I.J. Good (1969) Some Applications of the Singular Decomposition of a Matrix. Technometrics, 11(4), 823-831.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"H. Hotelling (1936) Relations between two sets of variates. Biometrika, 27, 321-77.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"O. Ledoit, M. Wolf (2004) A Well-Conditioned Estimator for Large-Dimensional Covariance Matrices, Journal of Multivariate Analysis, 88(2), 365-411.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"O. Ledoit, M. Wolf (2018) Analytical Nonlinear Shrinkage of Large-Dimensional Covariance Matrices, Working Paper No. 264, University of Zurich.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"L Molgedey, H.G. Schuster (1994) Separation of a Mixture of Independent Signals using Time Delayed Correlations. Physical Review Letters, 72, 3634-3636.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"K. Pearson (1901) On Lines and Planes of Closest Fit to Systems of Points in Space. Philosophical Magazine, 2(11), 559‚Äì572.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"D.-T. Pham (2000) Joint approximate diagonalization of positive definite matrices, SIAM Journal on Matrix Analysis and Applications, 22(4), 1136‚Äì1152.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"J.R. Schott (1997) Matrix Analysis for statistics, John Wiley & Sons, New York.","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"P. Tichavsky, A. Yeredor (2009), Fast approximate joint diagonalization incorporating weight matrices, IEEE Trans. Signal Process., 57(3), 878‚Äì891. https://staff.utia.cas.cz/files/Soutez_09/Tichavsky/WEDGE09.pdf","category":"page"},{"location":"#","page":"Documentation","title":"Documentation","text":"L. Tong, V. Soon, Y. Huang, R.W. Liu (1991). A necessary and sufficient condition Waveform-Preserving Blind Estimation of Multiple Independent Sources. IEEE Transactions on Signal Processing, 41(7), 2461-2470.","category":"page"},{"location":"#Contents-1","page":"Documentation","title":"Contents","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"Pages = [       \"index.md\",\n                \"Diagonalizations.md\",\n                \"pca.md\",\n\t\t\t\t\t\t\t\t\"whitening.md\",\n\t\t\t\t\t\t\t\t\"mca.md\",\n                \"cca.md\",\n\t\t\t\t\t\t\t\t\"gmca.md\",\n\t\t\t\t\t\t\t\t\"gcca.md\",\n\t\t\t\t\t\t\t\t\"csp.jl\",\n\t\t\t\t\t\t\t\t\"cstp.jl\",\n\t\t\t\t\t\t\t\t\"ajd.md\",\n\t\t\t\t\t\t\t\t\"majd.md\",\n\t\t\t\t\t\t\t\t\"tools.md\",\n\t\t]\nDepth = 1","category":"page"},{"location":"#Index-1","page":"Documentation","title":"Index","text":"","category":"section"},{"location":"#","page":"Documentation","title":"Documentation","text":"","category":"page"}]
}
